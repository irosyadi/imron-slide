---
title: "Signal and Systems"
subtitle: "1.4 The Unit Impulse and Unit Step Functions"
author: "Imron Rosyadi"
format:
  live-revealjs:
    logo: "qrjs_assets/unsoed_logo.png"
    footer: "[irosyadi-2025](https://imron-slide.vercel.app)"
    slide-number: true
    chalkboard: true
    scrollable: true
    controls: true
    progress: true
    preview-links: false
    transition: fade
    incremental: false
    smaller: false
    theme: [default, qrjs_assets/ir_style.scss]
filters:
  - pyodide
---

# 1.4 The Unit Impulse and Unit Step Functions

---

## Introduction

The **unit impulse** and **unit step** functions are fundamental `signals` in `Continuous` and `Discrete Time`.

- They serve as **building blocks** for representing other complex signals.
- Crucial for understanding `System Responses` (e.g., Impulse Response).

::: {.notes}
Today, we'll dive into these essential signals. We'll define them for both discrete and continuous time, explore their relationships, and see how they are used, including their powerful sampling property.
:::

---

## 1.4.1 The Discrete-Time Unit Impulse Sequence ($\delta[n]$)

The **discrete-time unit impulse** (or `unit sample`) is defined as:

$$
\delta[n]= \begin{cases}0, & n \neq 0 \\ 1, & n=0\end{cases} \quad \text{(Equation 1.63)}
$$

It represents a single, instantaneous event at $n=0$.

**Mathematical Concept**

- A single point with value 1 at $n=0$.
- All other points are 0.
- Analogous to a very short `click` or `tap`.

---

## 1.4.1 The Discrete-Time Unit Impulse Sequence ($\delta[n]$)

**Interactive Plot**

```{pyodide}
#| max-lines: 10
import numpy as np
import matplotlib.pyplot as plt

# Configure matplotlib for clean plots in presentation
plt.rcParams['figure.figsize'] = (7, 3.5)
plt.rcParams['axes.grid'] = True
plt.rcParams['lines.linewidth'] = 2
plt.rcParams['font.size'] = 12

n = np.arange(-5, 6)
delta_n = np.zeros_like(n, dtype=int)
delta_n[n == 0] = 1

plt.stem(n, delta_n, use_line_collection=True)
plt.title(r'Discrete-Time Unit Impulse: $\delta[n]$')
plt.xlabel('n')
plt.ylabel('Amplitude')
plt.xticks(n)
plt.ylim(-0.2, 1.2)
plt.axhline(0, color='black',linewidth=0.5)
plt.show()
```

::: {.notes}
The discrete-time unit impulse, also known as the unit sample, is a very simple yet powerful signal. As you can see from the definition and the plot, it's non-zero only at n=0, where its value is 1. Think of it as a single, isolated "click" in time. We often use it to represent instantaneous events or to probe a system's behavior. We'll soon see its importance as a building block for other signals.
:::

---

## 1.4.1 The Discrete-Time Unit Step Sequence ($u[n]$)

The **discrete-time unit step** is defined by:

$$
u[n]= \begin{cases}0, & n<0 \\ 1, & n \geq 0\end{cases} \quad \text{(Equation 1.64)}
$$

It represents a signal that `turns on` at $n=0$ and stays on.

**Engineering Application**

- Often used to model a `switch` being turned on.
- Represents the `initiation` of a process.

---

## 1.4.1 The Discrete-Time Unit Step Sequence ($u[n]$)

```{pyodide}
#| max-lines: 10
import numpy as np
import matplotlib.pyplot as plt

n = np.arange(-5, 6)
u_n = np.zeros_like(n, dtype=int)
u_n[n >= 0] = 1

plt.stem(n, u_n, use_line_collection=True)
plt.title(r'Discrete-Time Unit Step: $u[n]$')
plt.xlabel('n')
plt.ylabel('Amplitude')
plt.xticks(n)
plt.ylim(-0.2, 1.2)
plt.axhline(0, color='black',linewidth=0.5)
plt.show()
```

::: {.notes}
The discrete-time unit step is equally important. It's zero for all negative indices and then jumps to 1 and stays at 1 for all non-negative indices. This signal is often used to represent the moment something is "switched on" or the start of a process. For example, if you apply a constant voltage to a circuit at a specific time, that can be modeled with a step function.
:::

---

## Relationship Between $\delta[n]$ and $u[n]$ (Difference)

The discrete-time unit impulse is the **first difference** of the discrete-time step:

$$
\delta[n]=u[n]-u[n-1] \quad \text{(Equation 1.65)}
$$

This means you can generate an impulse from two shifted step functions.

**Concept Illustrated**
```{mermaid}
graph LR
    A["u[n]"] --> B{Delay by 1};
    B --> C["u[n-1]"];
    A --> D{Subtract};
    C --> D;
    D --> E["$$\delta[n]$$"];
```

---

## Relationship Between $\delta[n]$ and $u[n]$ (Difference)

**Interactive Demonstration**

```{pyodide}
#| max-lines: 10
import numpy as np
import matplotlib.pyplot as plt

n = np.arange(-5, 6)
u_n = np.array([1 if x >= 0 else 0 for x in n])
u_n_minus_1 = np.array([1 if x >= 1 else 0 for x in n])
delta_n_calc = u_n - u_n_minus_1

plt.stem(n, u_n, linefmt='b-', markerfmt='bo', label=r'$u[n]$', use_line_collection=True)
plt.stem(n, u_n_minus_1, linefmt='g--', markerfmt='gx', label=r'$u[n-1]$', use_line_collection=True)
plt.stem(n, delta_n_calc, linefmt='r:', markerfmt='ro', label=r'$u[n] - u[n-1]$', use_line_collection=True)

plt.title(r'Relationship: $\delta[n] = u[n] - u[n-1]$')
plt.xlabel('n')
plt.ylabel('Amplitude')
plt.xticks(n)
plt.ylim(-0.2, 1.2)
plt.legend()
plt.axhline(0, color='black',linewidth=0.5)
plt.grid(True)
plt.show()
```

::: {.notes}
This is a crucial relationship. If you take the unit step `u[n]` and subtract a delayed version of itself, `u[n-1]`, you get the unit impulse `delta[n]`. Think about it: `u[n]` turns on at n=0. `u[n-1]` turns on at n=1. So, when you subtract them, the '1's cancel out everywhere except at n=0 (where `u[n]` is 1 and `u[n-1]` is 0), resulting in a single value of 1. This reinforces how these basic signals are interconnected.
:::

---

## Relationship Between $\delta[n]$ and $u[n]$ (Running Sum)

Conversely, the discrete-time unit step is the **running sum** of the unit impulse:

$$
u[n]=\sum_{m=-\infty}^{n} \delta[m] \quad \text{(Equation 1.66)}
$$

This means you can `build up` a step function by accumulating impulses.

**Mathematical Form**
$$
u[n]=\sum_{k=0}^{\infty} \delta[n-k] \quad \text{(Equation 1.67)}
$$
- Or, a superposition of delayed impulses.
- Emphasizes `accumulation`.

---

## Relationship Between $\delta[n]$ and $u[n]$ (Running Sum)

**Interactive Demonstration: Running Sum**

```{pyodide}
#| max-lines: 10
import numpy as np
import matplotlib.pyplot as plt

n_range = np.arange(-5, 6)
delta_n = np.array([1 if x == 0 else 0 for x in n_range])
u_n_sum = np.zeros_like(n_range, dtype=float)

cumulative_sum = 0
for i, val_n in enumerate(n_range):
    cumulative_sum += delta_n[i] # This is only correct assuming signal starts from -infinity,
                                 # here we simulate sum up to current n
    u_n_sum[i] = cumulative_sum

plt.stem(n_range, u_n_sum, use_line_collection=True)
plt.title(r'Running Sum of $\delta[m]$ to get $u[n]$')
plt.xlabel('n')
plt.ylabel('Amplitude')
plt.xticks(n_range)
plt.ylim(-0.2, 1.2)
plt.axhline(0, color='black',linewidth=0.5)
plt.grid(True)
plt.show()
```

::: {.notes}
Just as we can get an impulse by differencing, we can get a step by summing. The unit step `u[n]` is simply the running sum of the unit impulse. If you add up the values of `delta[m]` from negative infinity up to `n`, you'll see that for any `n < 0`, the sum is zero because `delta[m]` is zero. But once `n` reaches zero or goes positive, the `delta[0]` component of value 1 gets included, and the sum becomes 1. This also implies that the step function can be seen as an infinite sum of delayed impulses. This concept of summing impulses to form other signals is foundational to convolution, which we'll cover in Chapter 2.
:::

---

## Sampling Property of $\delta[n]$

The unit impulse can be used to `sample` the value of a signal at a specific point.

$$
x[n] \delta[n]=x[0] \delta[n] \quad \text{(Equation 1.68)}
$$

More generally, for a delayed impulse:
$$
x[n] \delta\left[n-n_{0}\right]=x\left[n_{0}\right] \delta\left[n-n_{0}\right] \quad \text{(Equation 1.69)}
$$

This property is extremely powerful for `signal analysis`.

**Example:** What is $x[n]\delta[n-3]$ if $x[n] = \cos(\frac{\pi n}{4})$?
$x[n]\delta[n-3] = x[3]\delta[n-3] = \cos(\frac{3\pi}{4})\delta[n-3] = -\frac{\sqrt{2}}{2}\delta[n-3]$

::: {.notes}
This is one of the most important properties of the unit impulse: its sampling property. Because the impulse is only non-zero at one specific point, when you multiply any signal `x[n]` by `delta[n]`, the result is `x[0]` at `n=0` and zero everywhere else. It "picks out" the value of the signal at that specific time. If the impulse is delayed to `n_0`, it picks out `x[n_0]`. This is incredibly useful for isolating specific values of a signal or for simplifying expressions in system analysis, especially when working with convolution.
:::

---

## 1.4.2 The Continuous-Time Unit Step Function ($u(t)$)

The **continuous-time unit step function** is defined as:

$$
u(t)= \begin{cases}0, & t<0 \\ 1, & t>0\end{cases} \quad \text{(Equation 1.70)}
$$

Note: $u(t)$ is `discontinuous` at $t=0$.

**Physical Interpretation**

- Represents an abrupt `change` in a system.
- E.g., turning on a power supply, applying a force.

---

## 1.4.2 The Continuous-Time Unit Step Function ($u(t)$)

**Interactive Plot**

```{pyodide}
#| max-lines: 10
import numpy as np
import matplotlib.pyplot as plt

t = np.linspace(-3, 3, 500)
u_t = np.where(t > 0, 1, 0) # Use t > 0 for correct definition (excluding t=0 explicitly)

plt.plot(t, u_t, label=r'$u(t)$')
plt.plot(0, 0, 'wo', markeredgecolor='b', markersize=8) # Open circle at t=0, value 0
plt.plot(0, 1, 'bo', markersize=8) # Closed circle at t=0, value 1 (common convention, though sometimes undefined)
plt.hlines(0, -3, 0, colors='b', linestyles='solid')
plt.hlines(1, 0, 3, colors='b', linestyles='solid')


plt.title(r'Continuous-Time Unit Step: $u(t)$')
plt.xlabel('t')
plt.ylabel('Amplitude')
plt.ylim(-0.2, 1.2)
plt.axvline(0, color='gray', linestyle='--', linewidth=0.5)
plt.axhline(0, color='black', linewidth=0.5)
plt.grid(True)
plt.show()
```

::: {.notes}
The continuous-time unit step `u(t)` is very similar to its discrete counterpart. It's zero for negative time and rises to 1 for positive time. The key difference is the discontinuity at `t=0`. For practical purposes in engineering, we often define `u(0)` as 0.5 or leave it undefined, but its behavior surrounding that point is what's important. It models a sharp 'on' transition, like closing a switch in an analog circuit.
:::

---

## The Continuous-Time Unit Impulse Function ($\delta(t)$)

The continuous-time unit impulse is related to the unit step by:
$$
u(t)=\int_{-\infty}^{t} \delta(\tau) d \tau \quad \text{(Equation 1.71)}
$$

This implies:
$$
\delta(t)=\frac{d u(t)}{d t} \quad \text{(Equation 1.72)}
$$

**Challenge:** `u(t)` is `not formally differentiable` at $t=0$.

::: {.notes}
Now, let's turn to the continuous-time unit impulse, `delta(t)`. It's fundamentally linked to the unit step. If you integrate the impulse, you get the step. This also means that the impulse can be thought of as the derivative of the unit step. However, `u(t)` has an abrupt jump at `t=0`, making it formally non-differentiable in the traditional sense. This is where the concept of the impulse becomes an idealization.
:::

---

## Continuous-Time Unit Impulse: An Idealization

To understand $\delta(t)$, we approximate $u(t)$ with a smooth function $u_{\Delta}(t)$.

**Approximate Unit Step ($u_{\Delta}(t)$)**

- Rises from 0 to 1 over a small interval $\Delta$.
- $\delta(t)=\lim _{\Delta \rightarrow 0} \delta_{\Delta}(t)$ (Equation 1.74)

```{pyodide}
#| max-lines: 10
import numpy as np
import matplotlib.pyplot as plt

def u_delta(t, delta):
    if delta == 0:
        return np.where(t > 0, 1, 0)
    return np.where(t <= 0, 0, np.where(t >= delta, 1, t / delta))

t_vals = np.linspace(-1, 2, 500)

plt.figure(figsize=(7, 3.5))
for delta_val in [1.0, 0.5, 0.1]:
    plt.plot(t_vals, u_delta(t_vals, delta_val), label=f'$\Delta$={delta_val:.1f}')

plt.title(r'Approximate Unit Step $u_{\Delta}(t)$')
plt.xlabel('t')
plt.ylabel('Amplitude')
plt.ylim(-0.2, 1.2)
plt.xlim(-0.2, 1.2)
plt.axvline(0, color='gray', linestyle=':', linewidth=0.5)
plt.axhline(0, color='black', linewidth=0.5)
plt.grid(True)
plt.legend()
plt.show()
```

---

## Continuous-Time Unit Impulse: An Idealization

**Derivative of Approximation ($\delta_{\Delta}(t)$)**

- A `short pulse` of duration $\Delta$.
- **Crucially:** Its `area is always 1`.

```{pyodide}
#| max-lines: 10
import numpy as np
import matplotlib.pyplot as plt

def delta_delta(t, delta):
    if delta == 0:
        return np.zeros_like(t) # Handle limit case as 0 for plot
    return np.where((t >= 0) & (t <= delta), 1 / delta, 0)

t_vals = np.linspace(-1, 2, 500)

plt.figure(figsize=(7, 3.5))
for delta_val in [1.0, 0.5, 0.1]:
    plt.plot(t_vals, delta_delta(t_vals, delta_val), label=f'$\Delta$={delta_val:.1f}')

plt.title(r'Derivative of Approx. Step $\delta_{\Delta}(t)$')
plt.xlabel('t')
plt.ylabel('Amplitude')
plt.ylim(-0.2, 12)
plt.xlim(-0.2, 1.2)
plt.axvline(0, color='gray', linestyle='-', linewidth=0.5)
plt.axhline(0, color='black', linewidth=0.5)
plt.grid(True)
plt.legend()
plt.show()
```
::: {.notes}
To properly understand `delta(t)`, we use the concept of an idealization through a limiting process. Imagine an approximate step function, `u_delta(t)`, that smoothly rises from 0 to 1 over a very short duration `delta`. As `delta` gets smaller and smaller, `u_delta(t)` approaches the ideal `u(t)`.

Now, consider the derivative of this approximate step, `delta_delta(t)`. It's a pulse of height `1/delta` and duration `delta`, meaning its area is always `(1/delta) * delta = 1`, regardless of how small `delta` is. As `delta` approaches zero, this pulse becomes infinitely tall and infinitesimally narrow, but its area remains unity. This infinitely tall, infinitely narrow pulse with unit area is our continuous-time unit impulse `delta(t)`. This `unit area` is its defining characteristic.
:::

---

## Continuous-Time Unit Impulse (Graphical Representation)

The unit impulse $\delta(t)$ is graphically represented by an arrow at $t=0$, with its height indicating the **area** (or `strength`) of the impulse.

:::: {.columns}
::: {.column width="50%"}
**Unit Impulse**

- Infinitely tall, infinitesimally narrow.
- Area = 1.

<br>
<img src="https://cdn.mathpix.com/cropped/2024_02_14_ad5c48a840b9702e9410g-065.jpg?height=246&width=399&top_left_y=245&top_left_x=518" alt="Continuous-time unit impulse" style="width:75%;">

:::
::: {.column width="50%"}
**Scaled Impulse ($k\delta(t)$)**

- Area = $k$.
- The height of the arrow is proportional to $k$.

<br>
<img src="https://cdn.mathpix.com/cropped/2024_02_14_ad5c48a840b9702e9410g-065.jpg?height=249&width=385&top_left_y=244&top_left_x=970" alt="Scaled impulse" style="width:75%;">
:::
::::

::: {.notes}
Since sketching an infinitely narrow, infinitely tall function is impossible, we use a special graphical notation for the unit impulse: an arrow. The number next to the arrow, or its height, represents the *area* of the impulse, not its amplitude in the traditional sense. A "unit" impulse has an area of 1. A scaled impulse `k*delta(t)` has an area of `k`. This area property is crucial because it's what determines the effect of the impulse on a system, not its theoretical "height."
:::

---

## Relationship Between $\delta(t)$ and $u(t)$ (Running Integral)

The continuous-time unit step is the **running integral** of the unit impulse:

$$
u(t)=\int_{-\infty}^{t} \delta(\tau) d \tau \quad \text{(Equation 1.71)}
$$

This highlights the `accumulation of area`.

**Equivalent Form**
$$
u(t)=\int_{0}^{\infty} \delta(t-\sigma) d \sigma \quad \text{(Equation 1.75)}
$$

- `Superposition` of delayed impulses.

---

## Relationship Between $\delta(t)$ and $u(t)$ (Running Integral)

**Conceptual Illustration (Integral of $\delta(t)$)**

```{pyodide}
#| max-lines: 10
import numpy as np
import matplotlib.pyplot as plt

t_integral = np.linspace(-2, 2, 400)
# Conceptual integral representation of delta(t)
# For t < 0, integral is 0. For t > 0, integral is 1 (area of delta(0)).
u_t_integral_concept = np.where(t_integral > 0, 1, 0)

plt.plot(t_integral, u_t_integral_concept, label=r'$u(t)$ from $\int \delta(\tau)d\tau$')
plt.plot(0, 0, 'wo', markeredgecolor='b', markersize=8) # Open circle at t=0, value 0
plt.plot(0, 1, 'bo', markersize=8) # Closed circle at t=0, value 1
plt.hlines(0, -2, 0, colors='b', linestyles='solid')
plt.hlines(1, 0, 2, colors='b', linestyles='solid')

plt.title(r'Running Integral of $\delta(\tau)$ to get $u(t)$')
plt.xlabel('t')
plt.ylabel('Amplitude')
plt.ylim(-0.2, 1.2)
plt.axvline(0, color='gray', linestyle='--', linewidth=0.5)
plt.axhline(0, color='black', linewidth=0.5)
plt.grid(True)
plt.show()
```

::: {.notes}
The integral relationship is the reverse of the derivative. If you integrate the continuous-time unit impulse from negative infinity up to time `t`, you will trace out the unit step function. The integral is zero until `t` crosses `0`, at which point it captures the unit area of the impulse, and the integral becomes 1. This concept of integrating impulse areas is fundamental to understanding linear time-invariant systems and convolution, showing how systems accumulate the effect of an input `over time`.
:::

---

## Sampling Property of $\delta(t)$

Similar to discrete-time, the continuous-time impulse has a powerful `sampling property`:

$$
x(t) \delta(t)=x(0) \delta(t) \quad \text{(Equation 1.76)}
$$

For a delayed impulse:
$$
x(t) \delta\left(t-t_{0}\right)=x\left(t_{0}\right) \delta\left(t-t_{0}\right)
$$

This means multiplying a function by an impulse isolates the function's value at the impulse's location.

---

## Sampling Property of $\delta(t)$

**Demonstration**: `x(t) = sin(t)` multiplied by `$\delta(t - \pi/2)$`
```{pyodide}
#| max-lines: 10
import numpy as np
import matplotlib.pyplot as plt

t = np.linspace(0, 2 * np.pi, 500)
x_t = np.sin(t)
t0 = np.pi / 2 # Location of the impulse

# To represent delta(t-t0) visually, we use a vertical line at t0
# The impulse multiplication samples x(t) at t0
sampled_value = np.sin(t0) # This is x(t0)

plt.figure(figsize=(9, 4))
plt.plot(t, x_t, label=r'$x(t) = \sin(t)$', color='blue')
plt.vlines(t0, 0, sampled_value, colors='red', linestyles='solid', label='Impulse location $t_0=\pi/2$')
plt.plot(t0, sampled_value, 'ro', markersize=8, label=r'$x(t_0)$ value sampled')

plt.annotate(f'$x(t_0) = {sampled_value:.2f}$', xy=(t0, sampled_value), xytext=(t0 + 0.5, sampled_value + 0.2),
             arrowprops=dict(facecolor='black', shrink=0.05),
             fontsize=10, color='black')


plt.title(r'Sampling Property: $x(t) \delta(t-t_0) = x(t_0) \delta(t-t_0)$')
plt.xlabel('t')
plt.ylabel('Amplitude')
plt.grid(True)
plt.legend()
plt.axhline(0, color='black', linewidth=0.5)
plt.axvline(0, color='gray', linestyle='--', linewidth=0.5)
plt.show()
```

::: {.notes}
The sampling property is just as vital in continuous-time as it is in discrete-time. When you multiply a well-behaved continuous signal `x(t)` by `delta(t)`, the result is effectively the value of `x(t)` at `t=0`, scaled by the impulse itself. This means it's `x(0)` multiplied by an impulse of unit area. If the impulse is shifted to `t_0`, it samples `x(t_0)`. This property allows us to `extract` specific values from a continuous signal using the impulse function, which is critical in concepts like Fourier transforms and filtering.
:::

---

## Example 1.7: Derivative of a Discontinuous Signal

Consider the signal $x(t)$ (from Figure 1.40a). We want to find its derivative $\dot{x}(t)$.

**Original Signal $x(t)$**

- Piecewise constant.
- Contains `jump discontinuities`.

```{pyodide}
#| max-lines: 10
import numpy as np
import matplotlib.pyplot as plt

def plot_x_t(ax):
    t_vals = np.array([-1, 0, 1, 1, 2, 2, 4, 4, 5])
    x_vals = np.array([0, 0, 0, 2, 2, -1, -1, 1, 1])
  
    # Plotting segments
    ax.plot(t_vals[0:2], x_vals[0:2], 'b-')
    ax.plot(t_vals[2:4], x_vals[2:4], 'b-')
    ax.plot(t_vals[4:6], x_vals[4:6], 'b-')
    ax.plot(t_vals[6:8], x_vals[6:8], 'b-')
    ax.plot(t_vals[8:], x_vals[8:], 'b-')

    # Plot discontinuities with open/closed circles where appropriate
    ax.plot([0, 1, 2, 4], [0, 0, 2, -1], 'bo', fillstyle='none', markersize=6) # Open circles at start of jumps
    ax.plot([0, 1, 2, 4], [0, 2, -1, 1], 'bo', markersize=6) # Closed circles at end of jumps (new value)

    ax.set_title(r'Signal $x(t)$')
    ax.set_xlabel('t')
    ax.set_ylabel('Amplitude')
    ax.set_ylim(-1.5, 2.5)
    ax.set_xlim(-0.5, 4.5)
    ax.axhline(0, color='black',linewidth=0.5)
    ax.axvline(0, color='gray', linestyle='--', linewidth=0.5)
    ax.grid(True)

fig, ax = plt.subplots(figsize=(7, 3.5))
plot_x_t(ax)
plt.tight_layout()
plt.show()
```

---

## Example 1.7: Derivative of a Discontinuous Signal

**Derivative $\dot{x}(t)$**

- Zero where $x(t)$ is constant.
- `Impulses` at jump discontinuities.
- Area of impulse = `size of jump`.

```{pyodide}
#| max-lines: 10
import numpy as np
import matplotlib.pyplot as plt

fig, ax = plt.subplots(figsize=(7, 3.5))
# Discontinuities in x(t) and their jump sizes
jump_times = [1, 2, 4]
jump_sizes = [2, -3, 2] # 0 to 2, 2 to -1, -1 to 1

# Plotting impulses
for t_jump, size_jump in zip(jump_times, jump_sizes):
    ax.arrow(t_jump, 0, 0, size_jump, head_width=0.1, head_length=0.2 * np.sign(size_jump),
             fc='red', ec='red', linewidth=2)
    ax.text(t_jump, size_jump * 0.5, f'{size_jump}', color='red', ha='center', va='bottom' if size_jump > 0 else 'top', fontsize=10)

ax.set_title(r'Derivative $\dot{x}(t)$')
ax.set_xlabel('t')
ax.set_ylabel('Area (Impulse Strength)')
ax.set_ylim(-3.5, 2.5)
ax.set_xlim(-0.5, 4.5)
ax.axhline(0, color='black',linewidth=0.5)
ax.axvline(0, color='gray', linestyle='--', linewidth=0.5)
ax.grid(True)
plt.tight_layout()
plt.show()
```

::: {.notes}
This example beautifully demonstrates the power of the impulse function. The derivative of a constant signal is zero. However, when a signal has a 'jump discontinuity', its derivative at that point is not conventionally defined. Using the concept of the impulse, the derivative at a jump discontinuity becomes an impulse whose area is equal to the magnitude of the jump.
For `x(t)`:
- At `t=1`, `x(t)` jumps from 0 to 2. This is a jump of +2, so `x_dot(t)` has an impulse of area +2 at `t=1`.
- At `t=2`, `x(t)` jumps from 2 to -1. This is a jump of -3, so `x_dot(t)` has an impulse of area -3 at `t=2`.
- At `t=4`, `x(t)` jumps from -1 to 1. This is a jump of +2, so `x_dot(t)` has an impulse of area +2 at `t=4`.
Everywhere else, where the signal is flat, the derivative is zero.
:::

---

## Example 1.7: Recovering $x(t)$ from $\dot{x}(t)$

We can verify the derivative by `integrating` $\dot{x}(t)$ to recover $x(t)$.
$$
x(t)=\int_{0}^{t} \dot{x}(\tau) d \tau \quad \text{(Equation 1.77)}
$$

Each impulse contributes its **area** to the running sum (integral).

**Integral Steps**

- For $t<1$: $\int_{0}^{t} \dot{x}(\tau) d \tau = 0$
- For $1<t<2$: $\int_{0}^{t} \dot{x}(\tau) d \tau = (\text{Area at } t=1) = 2$
- For $2<t<4$: $\int_{0}^{t} \dot{x}(\tau) d \tau = (\text{Area at } t=1) + (\text{Area at } t=2) = 2 + (-3) = -1$
- For $t>4$: $\int_{0}^{t} \dot{x}(\tau) d \tau = (\text{Area at } t=1) + (\text{Area at } t=2) + (\text{Area at } t=4) = 2 + (-3) + 2 = 1$

---

## Example 1.7: Recovering $x(t)$ from $\dot{x}(t)$

**Interactive Verification (Conceptual)**

```{pyodide}
#| max-lines: 10
import numpy as np
import matplotlib.pyplot as plt

t_integral_plot = np.linspace(-0.5, 5, 500)
x_recovered = np.zeros_like(t_integral_plot, dtype=float)

# Define the impulses and their areas
impulses = [(1, 2), (2, -3), (4, 2)] # (time, area)

for i, t_val in enumerate(t_integral_plot):
    cumulative_area = 0
    for imp_time, imp_area in impulses:
        if t_val >= imp_time:
            cumulative_area += imp_area
    x_recovered[i] = cumulative_area

plt.figure(figsize=(7, 3.5))
plt.plot(t_integral_plot, x_recovered, 'b-', label='Recovered $x(t)$')

# Overlay the original x(t) points for comparison
original_t = np.array([-1, 0, 1, 1, 2, 2, 4, 4, 5])
original_x = np.array([0, 0, 0, 2, 2, -1, -1, 1, 1])
# plt.plot(original_t, original_x, 'ro', markersize=4, alpha=0.6, label='Original $x(t)$ points')

plt.title(r'Recovery of $x(t)$ from $\int \dot{x}(\tau)d\tau$')
plt.xlabel('t')
plt.ylabel('Amplitude')
plt.ylim(-1.5, 2.5)
plt.xlim(-0.5, 4.5)
plt.axhline(0, color='black',linewidth=0.5)
plt.axvline(0, color='gray', linestyle='--', linewidth=0.5)
plt.grid(True)
plt.legend()
plt.show()

```

::: {.notes}
To confirm our derivative, we integrate `x_dot(t)`. The integral accumulates the areas of the impulses.
- For `t` less than 1, the integral is 0.
- As `t` crosses `1`, the integral captures the area of the impulse at `t=1`, which is +2. So, `x(t)` becomes 2.
- As `t` crosses `2`, the integral adds the area of the impulse at `t=2`, which is -3, resulting in `2 - 3 = -1`. So, `x(t)` becomes -1.
- Finally, as `t` crosses `4`, the integral adds the area of the impulse at `t=4`, which is +2, resulting in `-1 + 2 = +1`. So, `x(t)` becomes 1.
This exactly reconstructs the original signal `x(t)`, demonstrating the complementary nature of differentiation and integration with respect to impulse functions.
:::

---

## Key Takeaways

### Unit Impulse
- **Discrete-Time ($\delta[n]$):** Non-zero only at $n=0$ (value 1).
- **Continuous-Time ($\delta(t)$):** Infinitely tall, infinitesimally narrow pulse with unit **area**. An idealization.

### Unit Step
- **Discrete-Time ($u[n]$):** `0` for $n<0$, `1` for $n \ge 0$.
- **Continuous-Time ($u(t)$):** `0` for $t<0$, `1` for $t > 0$.

### Relationships
- $\delta[n] = u[n] - u[n-1]$
- $u[n] = \sum_{m=-\infty}^{n} \delta[m]$
- $\delta(t) = \frac{du(t)}{dt}$ ; $u(t) = \int_{-\infty}^{t} \delta(\tau) d\tau$

---

## Key Takeaways

### Sampling Property
- $x[n]\delta[n-n_0] = x[n_0]\delta[n-n_0]$
- $x(t)\delta(t-t_0) = x(t_0)\delta(t-t_0)$

These functions are fundamental for **signal representation** and **system analysis**.

::: {.notes}
To summarize, the unit impulse and unit step functions are the bedrock of signals and systems analysis. They allow us to compactly represent abrupt changes, instantaneous events, and serve as basic building blocks for more complex signals. Their interconnected nature, represented by the difference/sum and derivative/integral relationships, is crucial. But perhaps most importantly, remember their sampling property, which allows us to extract signal values at specific points, a concept vital for future topics. Mastering these basic signals will greatly aid your understanding of system responses and signal processing.
:::
