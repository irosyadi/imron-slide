---
title: "Signal and Systems"
subtitle: "1.3 Exponential and Sinusoidal Signals"
author: "Imron Rosyadi"
format:
  live-revealjs:
    logo: "qrjs_assets/unsoed_logo.png"
    footer: "[irosyadi-2025](https://imron-slide.vercel.app)"
    slide-number: true
    chalkboard: true
    scrollable: true
    controls: true
    progress: true
    preview-links: false
    transition: fade
    incremental: false
    smaller: false
    theme: [default, qrjs_assets/ir_style.scss]
filters:
  - pyodide
---

# 1.3 Exponential and Sinusoidal Signals

---

## Introduction: Fundamental Building Blocks

In signals and systems, several basic types of signals frequently appear and serve as **fundamental building blocks** from which more complex signals can be constructed.

*   **Importance:**
    -   Represent a wide range of physical phenomena.
    -   Are crucial for analyzing the behavior of systems.
    -   Form the basis for powerful analytical tools (e.g., Fourier Analysis).

We will explore two key types:

1.  **Exponential Signals**
2.  **Sinusoidal Signals**

::: {.notes}
These signals are not just mathematical constructs; they have direct physical interpretations. For example, the natural response of an electrical circuit can often be described using exponentials or sinusoids. Understanding them is a prerequisite for understanding more advanced concepts like frequency response and filtering. They are to signals and systems what elementary particles are to physics – the smallest, irreducible components from which everything else is built.
:::

---

## Continuous-Time Real Exponential Signals

The continuous-time complex exponential signal is generally of the form $x(t)=C e^{a t}$, where $C$ and $a$ are complex numbers.

**Real Exponential Case: $C, a$ are real**

:::: {.columns}
::: {.column width="50%"}
```{=html}
<img src="https://cdn.mathpix.com/cropped/2024_02_14_ad5c48a840b9702e9410g-046.jpg?height=445&width=777&top_left_y=1150&top_left_x=262" alt="Growing exponential" style="width: 100%;">
```
(a) $a>0$
:::
::: {.column width="50%"}
```{=html}
<img src="https://cdn.mathpix.com/cropped/2024_02_14_ad5c48a840b9702e9410g-046.jpg?height=440&width=773&top_left_y=1681&top_left_x=264" alt="Decaying exponential" style="width: 100%;">
```
(b) $a<0$
:::
::::

---

## Continuous-Time Real Exponential Signals

-   **Form:** $x(t)=C e^{a t}$
-   **Behavior types (Figure 1.19):**
    -   If $a > 0$: **Growing exponential**.
        -   Used for chain reactions in atomic explosions, chemical reactions, population growth.
    -   If $a < 0$: **Decaying exponential**.
        -   Used for radioactive decay, responses of $RC$ circuits, damped mechanical systems.
    -   If $a = 0$: **Constant signal** ($x(t)=C$).

::: {.notes}
Real exponentials describe dynamic processes where a quantity either increases or decreases over time at a rate proportional to its current value. Think of compounding interest ($a>0$) or the discharge of a capacitor ($a<0$). These are fundamental to understanding the transient responses of many physical systems such as first-order RC or RL circuits.
:::

---

## Demo: Continuous-Time Real Exponential

Explore how changing parameters affect a real exponential signal.

```{pyodide}
#| max-lines: 10
import numpy as np
import matplotlib.pyplot as plt

# Function to plot the real exponential signal
def plot_real_exponential(C_val, a_val):
    t = np.linspace(-2, 2, 400) # Time range for plotting
    x_t = C_val * np.exp(a_val * t)

    fig, ax = plt.subplots(figsize=(7, 5))
    ax.plot(t, x_t, label=f'$x(t) = {C_val:.1f}e^{{{a_val:.1f}t}}$', color='blue')
    ax.set_title('Continuous-Time Real Exponential Signal')
    ax.set_xlabel('Time (t)')
    ax.set_ylabel('Amplitude')
    ax.grid(True)
    ax.axvline(0, color='gray', linestyle=':', linewidth=0.8)
    ax.axhline(0, color='gray', linestyle=':', linewidth=0.8)
    ax.legend()
    # Dynamically adjust Y-lim to fit the signal, with a minimum range
    min_y = np.min(x_t)
    max_y = np.max(x_t)
    if min_y == max_y: # Case for constant signal (a=0)
        min_y -= 0.5
        max_y += 0.5
    else:
        min_y -= abs(min_y) * 0.1
        max_y += abs(max_y) * 0.1
    ax.set_ylim(min(min_y, -5), max(max_y, 5)) # Ensure some visible range
    plt.show()

# Default values for C and a
# Change these values directly in the code to explore different behaviors
C_val_default = 1.0
a_val_default = -0.5

# Call the plotting function with default values
plot_real_exponential(C_val_default, a_val_default)
```

::: {.notes}
**Experiment by changing values in the code:**
-   **`a_val_default` > 0:** Observe the exponential growth. **Real-world example:** Uncontrolled population growth, chain reactions.
-   **`a_val_default` < 0:** Observe the exponential decay. **Real-world example:** Discharge of a capacitor in an RC circuit, radioactive decay.
-   **`a_val_default` = 0:** The signal becomes a constant.
-   **`C_val_default`:** Changes the initial amplitude and direction (if negative). Notice how quickly the signal can grow or decay with changes in `a_val_default`.
:::

---

## Continuous-Time Periodic Complex Exponential & Sinusoidal Signals

**Purely Imaginary Exponential: $a = j \omega_0$**

-   **Form:** $x(t) = e^{j \omega_0 t}$
-   This signal represents a point rotating on the unit circle in the complex plane.
-   **Periodicity:** This signal is periodic.
    -   Condition: $e^{j \omega_0 t} = e^{j \omega_0 (t+T)} \implies e^{j \omega_0 T} = 1$.
    -   Requires $\omega_0 T$ to be an integer multiple of $2\pi$.
    -   **Fundamental Period ($T_0$):** Smallest positive $T$ satisfying the condition.
        $$
        T_0 = \frac{2\pi}{|\omega_0|} \quad (\text{for } \omega_0 \ne 0) \tag{1.24}
        $$
    -   $\omega_0$ is the **angular frequency** (radians/second). $f_0 = \omega_0 / (2\pi)$ is the **ordinary frequency** (Hertz, Hz).

---

## Continuous-Time Periodic Complex Exponential & Sinusoidal Signals

**Sinusoidal Signals**

-   **Form:** $x(t) = A \cos(\omega_0 t + \phi)$ (Figure 1.20)
    -   $A$: Amplitude, $\omega_0$: Angular frequency,   $\phi$: Phase (radians), representing a time shift.
-   **Periodicity:** Same fundamental period $T_0 = \frac{2\pi}{|\omega_0|}$ as the complex exponential.
-   **Applications:** Ideal LC circuits, spring-mass systems, AC power signals.

```{=html}
<img src="https://cdn.mathpix.com/cropped/2024_02_14_ad5c48a840b9702e9410g-047.jpg?height=538&width=794&top_left_y=1642&top_left_x=263" alt="Continuous-time sinusoidal signal" style="width: 50%;">
```

::: {.notes}
Periodic complex exponentials are often called "rotating phasors" in the complex plane. Their real and imaginary parts are sinusoids. This connection is vital, as it allows us to analyze sinusoidal signals using the simpler algebra of complex exponentials. Stress the relationship between $\omega_0$ and $T_0$: high frequency means short period, low frequency means long period. Sinusoids are the workhorses of EE, representing steady-state AC signals, waves, and oscillations in many physical systems where energy is conserved.
:::

---

## Euler's Relation and Signal Representation

**Euler's Relation:** Unites complex exponentials and sinusoids – a fundamental identity in ECE.
$$
e^{j \omega_0 t}=\cos \omega_0 t+j \sin \omega_0 t \tag{1.26}
$$

**Representing Sinusoids with Exponentials:**
We can express a sinusoidal signal in terms of complex exponentials, making analysis easier:
$$
A \cos (\omega_0 t+\phi)=\frac{A}{2} e^{j \phi} e^{j \omega_0 t}+\frac{A}{2} e^{-j \phi} e^{-j \omega_0 t} \tag{1.27}
$$

---

## Euler's Relation and Signal Representation

Alternatively (using the real part of a single complex exponential):
$$
A \cos (\omega_0 t+\phi)=A \mathcal{R} \text{e}\left\{e^{j\left(\omega_0 t+\phi\right)}\right\} \tag{1.28}
$$
Similarly for sine (using the imaginary part):
$$
A \sin (\omega_0 t+\phi)=A \mathcal{I} \text{m}\left\{e^{j\left(\omega_0 t+\phi\right)}\right\} \tag{1.29}
$$

---

## Euler's Relation and Signal Representation

**Frequency and Period Relationship (Inverse Proportionality):**
-   Increasing $|\omega_0|$ means higher oscillation rate, smaller period $T_0$.
-   Decreasing $|\omega_0|$ means lower oscillation rate, larger period $T_0$.

```{=html}
<img src="https://cdn.mathpix.com/cropped/2024_02_14_ad5c48a840b9702e9410g-049.jpg?height=447&width=847&top_left_y=264&top_left_x=244" alt="omega1" style="width: 30%; display: inline-block;">
<img src="https://cdn.mathpix.com/cropped/2024_02_14_ad5c48a840b9702e9410g-049.jpg?height=467&width=825&top_left_y=771&top_left_x=248" alt="omega2" style="width: 30%; display: inline-block;">
<img src="https://cdn.mathpix.com/cropped/2024_02_14_ad5c48a840b9702e9410g-049.jpg?height=478&width=834&top_left_y=1299&top_left_x=243" alt="omega3" style="width: 30%; display: inline-block;">
```
Figure 1.21: $\omega_1 > \omega_2 > \omega_3 \implies T_1 < T_2 < T_3$.

::: {.notes}
Euler's relation is arguably the most powerful identity in ECE. It allows us to convert sinusoidal signals, which are common in real-world systems, into complex exponentials, which are mathematically much easier to manipulate (e.g., differentiation, integration, system analysis). This is a cornerstone of Fourier analysis. Explain how the magnitude and phase of the complex amplitudes in (1.27) relate to $A$ and $\phi$: $\frac{A}{2}e^{j\phi}$ is a complex number whose magnitude is $A/2$ and phase is $\phi$.
:::

---

## Energy and Power of Periodic Signals

-   Periodic complex exponentials and sinusoidal signals have **infinite total energy** but **finite average power**. This classifies them as **power signals**.
-   **Example: $x(t) = e^{j \omega_0 t}$**
    -   Total energy integrated over all time is infinite, as the signal never dies out.
    -   However, the average power over *one period* is easily calculated:
        $$
        E_{\text{period}} = \int_{0}^{T_0} |e^{j \omega_0 t}|^2 dt = \int_{0}^{T_0} 1 \cdot dt = T_0 \tag{1.30}
        $$
    -   Average power over one period:
        $$
        P_{\text{period}} = \frac{1}{T_0} E_{\text{period}} = 1 \tag{1.31}
        $$
    -   Since the signal repeats identically, the average power over all time is also:
        $$
        P_x = \lim_{T \rightarrow \infty} \frac{1}{2T} \int_{-T}^{T} |e^{j \omega_0 t}|^2 dt = 1 \tag{1.32}
        $$

---

## Energy and Power of Periodic Signals

### Harmonically Related Complex Exponentials

-   A set of periodic exponentials, all with a common period $T_0$.
-   Their frequencies $\omega$ must be integer multiples of a fundamental frequency $\omega_0 = 2\pi/T_0$.
    $$
    \phi_k(t) = e^{j k \omega_0 t}, \quad k=0, \pm 1, \pm 2, \ldots \tag{1.36}
    $$
-   Each $\phi_k(t)$ (for $k \ne 0$) has a fundamental period $T_0/|k|$. This means they complete $|k|$ cycles within $T_0$.
-   These are the "harmonics" used in music and form the basis for **Fourier Series** representation of periodic signals (Chapter 3).

::: {.notes}
The concept of infinite energy but finite average power is crucial. It differentiates "energy signals" (finite total energy) from "power signals" (infinite total energy but finite average power). Most continuous-time periodic signals are power signals. Emphasize that harmonically related exponentials are the basis for building any complex periodic signal into its fundamental frequency and its overtones, similar to how musical instruments produce and combine different frequencies to create timbre.
:::

---

## Demo: Continuous-Time Sinusoidal Signal

Visualize how amplitude, frequency, and phase affect a sinusoidal signal.

```{pyodide}
#| max-lines: 10
import numpy as np
import matplotlib.pyplot as plt

# Function to plot a sinusoidal signal
def plot_sinusoid(A_val, omega0_val, phi_val):
    t = np.linspace(-4 * np.pi, 4 * np.pi, 500) # Time range for plotting
    x_t = A_val * np.cos(omega0_val * t + phi_val)

    fig, ax = plt.subplots(figsize=(7, 5))
    ax.plot(t, x_t, label=f'$x(t) = {A_val:.1f}\\cos({omega0_val:.1f}t + {phi_val:.1f})$', color='red')
    ax.set_title('Continuous-Time Sinusoidal Signal')
    ax.set_xlabel('Time (t)')
    ax.set_ylabel('Amplitude')
    ax.grid(True)
    ax.axvline(0, color='gray', linestyle=':', linewidth=0.8) # Mark t=0
    ax.axhline(0, color='gray', linestyle=':', linewidth=0.8) # Mark y=0
    ax.legend()
    # Adjust Y-limits slightly beyond amplitude
    ax.set_ylim(-1.2 * abs(A_val) if A_val != 0 else -1.2, 1.2 * abs(A_val) if A_val != 0 else 1.2)
    plt.show()

# Default values for Amplitude (A), Angular Frequency (omega0), and Phase (phi)
# Change these values directly in the code to explore different behaviors
A_val_default = 1.0
omega0_val_default = 1.0
phi_val_default = 0.0

# Call the plotting function with default values
plot_sinusoid(A_val_default, omega0_val_default, phi_val_default)
```

::: {.notes}
**Experiment by changing values in the code:**
-   **`A_val_default`:** Changes the peak value of the oscillation. This is the maximum displacement from equilibrium.
-   **`omega0_val_default`:** Controls how rapidly the signal oscillates. Higher $\omega_0$ means higher frequency, shorter period. Try small values (e.g., 0.5) and large values (e.g., 4.0). Notice the number of cycles within the plotting range.
-   **`phi_val_default`:** Shifts the signal horizontally. Positive $\phi$ means a left shift (advance in time), negative $\phi$ means a right shift (delay in time). Observe how the cosine wave changes its starting point at $t=0$. A phase of $\pi/2$ makes a cosine look like a negative sine.
:::

---

## Example 1.5: Sum of Complex Exponentials

It's useful to express the sum of two complex exponentials as a product of a single complex exponential and a sinusoid. This technique is often used in modulation.

**Problem:** Plot the magnitude of the signal $x(t)=e^{j 2 t}+e^{j 3 t}$.

**Solution Steps:**

1.  **Factor out average frequency:** The average frequency of $2t$ and $3t$ is $(2+3)/2 = 2.5t$.
    $$
    x(t)=e^{j 2.5 t}\left(e^{-j 0.5 t}+e^{j 0.5 t}\right) \tag{1.39}
    $$
2.  **Apply Euler's relation:** Recall $e^{jx} + e^{-jx} = 2 \cos(x)$. Here, $x=0.5t$.
    $$
    x(t)=2 e^{j 2.5 t} \cos (0.5 t) \tag{1.40}
    $$

---

## Example 1.5: Sum of Complex Exponentials

3.  **Find magnitude:** We use the property that $|z_1 z_2| = |z_1||z_2|$. Since $e^{j\theta}$ represents a complex number on the unit circle, its magnitude is always unity (i.e., $|e^{j 2.5 t}| = 1$).
    $$
    |x(t)|=2|\cos (0.5 t)| \tag{1.41}
    $$
This is a **full-wave rectified sinusoid** (Figure 1.22).

```{=html}
<img src="https://cdn.mathpix.com/cropped/2024_02_14_ad5c48a840b9702e9410g-051.jpg?height=281&width=710&top_left_y=1060&top_left_x=647" alt="Full-wave rectified sinusoid" style="width: 80%;">
```

::: {.notes}
This example demonstrates a useful algebraic manipulation that simplifies analysis. The resulting expression clearly shows the envelope $2|\cos(0.5t)|$ over the underlying high-frequency oscillation (from $e^{j 2.5t}$). This concept is important in areas like amplitude modulation (AM) where a carrier signal is effectively multiplied by a message signal, producing sidebands around the carrier frequency. The 'beating' phenomenon in sound waves is also an example of this.
:::

---

## Continuous-Time General Complex Exponential Signals

The most general complex exponential combines both real exponential and periodic complex exponential characteristics.

-   **Form:** $C e^{a t}$ where $C = |C|e^{j\theta}$ (polar form amplitude) and $a = r + j\omega_0$ (rectangular form exponent).
    $$
    C e^{a t}=|C| e^{r t} e^{j\left(\omega_0 t+\theta\right)} \tag{1.42}
    $$
-   **Expanded Form (real and imaginary parts are damped/growing sinusoids):**
    $$
    C e^{a t}=|C| e^{r t} \cos \left(\omega_0 t+\theta\right)+j|C| e^{r t} \sin \left(\omega_0 t+\theta\right) \tag{1.43}
    $$
    -   $r > 0$: Growing sinusoid (amplitude expands outward).
    -   $r < 0$: Decaying sinusoid (damped sinusoid, amplitude shrinks inward).

---

## Continuous-Time General Complex Exponential Signals

-   **Envelope:** The term $|C|e^{rt}$ acts as an **envelope**, shaping the amplitude of the oscillations.

:::: {.columns}
::: {.column width="50%"}
```{=html}
<img src="https://cdn.mathpix.com/cropped/2024_02_14_ad5c48a840b9702e9410g-052.jpg?height=423&width=883&top_left_y=664&top_left_x=209" alt="Growing sinusoid" style="width: 100%;">
```
(a) $r>0$
:::
::: {.column width="50%"}
```{=html}
<img src="https://cdn.mathpix.com/cropped/2024_02_14_ad5c48a840b9702e9410g-052.jpg?height=417&width=877&top_left_y=1126&top_left_x=212" alt="Decaying sinusoid" style="width: 100%;">
```
(b) $r<0$
:::
::::

**Applications:**
-   **Damped sinusoids:** Responses of RLC circuits, automotive suspension systems, and mechanical systems with both damping and restoring forces. These indicate energy dissipation with oscillations that decay in time. Modeling transient behavior in control systems.

::: {.notes}
This general form is extremely powerful for modeling real-world physical systems behavior, particularly the homogeneous solutions to linear differential equations with constant coefficients. `r` is the **damping factor** or **growth rate**, and $\omega_0$ is the **oscillating frequency**. For example, a car's suspension system responding to a bump ($r<0$) or the oscillations of a mass-spring-damper system. In electrical circuits, `r` relates to the resistance and $\omega_0$ to the inductance and capacitance, governing the natural modes of the system.
:::

---

## Demo: Continuous-Time Damped/Growing Sinusoid

Visualize the real part of a general complex exponential $C e^{at}$ as a damped or growing sinusoid.

```{pyodide}
#| max-lines: 10
import numpy as np
import matplotlib.pyplot as plt

# Function to plot the real part of a general complex exponential
def plot_general_complex_exponential(C_magnitude, r_val, omega0_val, phi_val_deg):
    t = np.linspace(0, 5, 500) # Time range for plotting (starting from 0)
    phi_val_rad = np.deg2rad(phi_val_deg) # Convert phase from degrees to radians

    # The real part of C * e^(a*t) is C_magnitude * e^(r_val*t) * cos(omega0_val*t + phi_val_rad)
    x_t_real = C_magnitude * np.exp(r_val * t) * np.cos(omega0_val * t + phi_val_rad)

    # Calculate and plot the positive and negative envelopes
    envelope_pos = C_magnitude * np.exp(r_val * t)
    envelope_neg = -C_magnitude * np.exp(r_val * t)

    fig, ax = plt.subplots(figsize=(7, 5))
    ax.plot(t, x_t_real, label=r'Re$\{Ce^{at}\}$', color='red')
    ax.plot(t, envelope_pos, 'k--', linewidth=0.8, label='Envelope')
    ax.plot(t, envelope_neg, 'k--', linewidth=0.8)

    ax.set_title(f'Continuous-Time Damped/Growing Sinusoid (Re(${{C_magnitude:.1f}}e^{{({{r_val:.1f}} + j{{omega0_val:.1f}})t}}e^{{j{{phi_val_deg:.0f}}^\\circ}}$))')
    ax.set_xlabel('Time (t)')
    ax.set_ylabel('Amplitude')
    ax.grid(True)
    ax.axvline(0, color='gray', linestyle=':', linewidth=0.8)
    ax.axhline(0, color='gray', linestyle=':', linewidth=0.8)
    ax.legend()
    # Adjust y-limits based on envelope, considering potential growth/decay
    max_val = np.max(envelope_pos)
    min_val = np.min(envelope_neg)
    ax.set_ylim(min_val * 1.1, max_val * 1.1)
    plt.show()

# Default values for the parameters
# Change these values directly in the code to explore different behaviors
C_magnitude_default = 1.0
r_val_default = -0.2
omega0_val_default = 5.0
phi_val_deg_default = 0

# Call the plotting function with default values
plot_general_complex_exponential(C_magnitude_default, r_val_default, omega0_val_default, phi_val_deg_default)
```

::: {.notes}
**Experiment by changing values in the code:**
-   **`r_val_default` (decay/growth factor):**
    -   **`< 0`:** The signal is a **damped sinusoid** (e.g., ringing in an RLC circuit after a disturbance). Oscillations decrease in amplitude.
    -   **`= 0`:** The signal is a **pure sinusoid** (constant amplitude).
    -   **`> 0`:** The signal is a **growing sinusoid**. Oscillations increase in amplitude (e.g., unstable system).
-   **`C_magnitude_default` (magnitude):** Scales the overall initial amplitude.
-   **`omega0_val_default` (angular frequency):** Changes how fast the signal oscillates.
-   **`phi_val_deg_default` (phase):** Shifts the starting point of the oscillation.
Observe how the black dashed lines (the envelope) define the boundaries of the sine wave's peaks and troughs, visually demonstrating the $|C|e^{rt}$ exponential behavior.
:::

---

## Discrete-Time Complex Exponential & Sinusoidal Signals

### Real Exponential Signals
-   **Form:** $x[n] = C \alpha^n$ (where $C$ and $\alpha$ are real numbers). Sometimes expressed as $x[n] = C e^{\beta n}$, where $\alpha = e^\beta$.
-   Unlike continuous time, $n$ is an integer here, so $\alpha^n$ can be interpreted directly for negative $\alpha$.

---

## Discrete-Time Complex Exponential & Sinusoidal Signals

-   **Behavior types (Figure 1.24):**

:::: {.columns}
::: {.column width="50%"}
```{=html}
<img src="https://cdn.mathpix.com/cropped/2024_02_14_ad5c48a840b9702e9410g-054.jpg?height=375&width=885&top_left_y=267&top_left_x=227" alt="alpha > 1" style="width: 100%;">
```
(a) $|\alpha|>1$: Growing exponential (magnitudes increase).
```{=html}
<img src="https://cdn.mathpix.com/cropped/2024_02_14_ad5c48a840b9702e9410g-054.jpg?height=373&width=921&top_left_y=725&top_left_x=204" alt="0 < alpha < 1" style="width: 100%;">
```
(b) $0<|\alpha|<1$: Decaying exponential (magnitudes decrease).
:::
::: {.column width="50%"}
```{=html}
<img src="https://cdn.mathpix.com/cropped/2024_02_14_ad5c48a840b9702e9410g-054.jpg?height=428&width=904&top_left_y=1164&top_left_x=210" alt="-1 < alpha < 0" style="width: 100%;">
```
(c) $-1 < \alpha < 0$: Decaying, but with **alternating sign** at each step.
```{=html}
<img src="https://cdn.mathpix.com/cropped/2024_02_14_ad5c48a840b9702e9410g-054.jpg?height=383&width=921&top_left_y=1693&top_left_x=209" alt="alpha < -1" style="width: 100%;">
```
(d) $\alpha < -1$: Growing, with **alternating sign**.
:::
::::

---

## Discrete-Time Complex Exponential & Sinusoidal Signals

- **Special Cases:**
    - $\alpha=1 \implies x[n]=C$ (constant DC signal).
    - $\alpha=-1 \implies x[n]=C(-1)^n$ (alternates between $C$ and $-C$, a high-frequency square wave).

::: {.notes}
The discrete-time real exponentials are widely used in finance (compounding interest on a discrete basis) or population dynamics (growth/decay per generation). The alternating sign when $\alpha$ is negative intros **oscillation** at the highest possible frequency in discrete time (Nyquist frequency) for a real signal. This is due to the inherent digital nature where a signal can "flip" sign at each sample. E.g., a stock price observed daily.
:::

---

## Demo: Discrete-Time Real Exponential

Explore how changing C and alpha affect a discrete-time real exponential.

```{pyodide}
#| max-lines: 10
import numpy as np
import matplotlib.pyplot as plt

# Function to plot the discrete-time real exponential signal
def plot_dt_real_exponential(C_val, alpha_val):
    n = np.arange(-10, 11) # Discrete time points (integers)
    # Using np.power for more robust handling of negative alpha and integer exponents
    x_n = C_val * np.array([np.power(alpha_val, k) for k in n])

    fig, ax = plt.subplots(figsize=(7, 5))
    ax.stem(n, x_n, linefmt='b-', markerfmt='bo', basefmt='r-',
            label=f'$x[n] = {C_val:.1f} \\cdot ({alpha_val:.1f})^n$')
  
    ax.set_title('Discrete-Time Real Exponential Signal')
    ax.set_xlabel('Sample (n)')
    ax.set_ylabel('Amplitude')
    ax.grid(True)
    ax.axvline(0, color='gray', linestyle=':', linewidth=0.8) # Mark n=0
    ax.axhline(0, color='gray', linestyle=':', linewidth=0.8) # Mark y=0
    ax.legend()
    # Adjust y-limits based on data but with sensible defaults
    max_abs_val = np.max(np.abs(x_n))
    if max_abs_val > 0:
        ax.set_ylim(-max_abs_val * 1.5, max_abs_val * 1.5)
    else: # Case where signal is all zeros
        ax.set_ylim(-1.5, 1.5)
    plt.tight_layout()
    plt.show()

# Default values for C and alpha
# Change these values directly in the code to explore different behaviors
C_val_default_dt = 1.0
alpha_val_default_dt = 0.5

# Call the plotting function with default values
plot_dt_real_exponential(C_val_default_dt, alpha_val_default_dt)
```

::: {.notes}
**Experiment by changing values in the code:**
-   **`alpha_val_default_dt`:**
    -   **`|alpha_val_default_dt| > 1`:** The signal grows rapidly.
    -   **`0 < |alpha_val_default_dt| < 1`:** The signal decays.
    -   **`alpha_val_default_dt > 0`:** The sign of $x[n]$ remains consistent with `C_val_default_dt`. This is like a smoothly changing quantity.
    -   **`alpha_val_default_dt < 0`:** The sign of $x[n]$ *alternates* with each step in $n$, creating an oscillatory appearance. This is a crucial distinction from continuous-time and represents high-frequency content.
-   **`C_val_default_dt`:** Scales the signal vertically.
Check the behavior for special cases like $\alpha = 1$, $\alpha = -1$, and $\alpha = 0.5$, $\alpha = -0.5$.
:::

---

## Discrete-Time Sinusoidal Signals

-   **Complex Exponential Forms (where $\alpha = e^{j\omega_0}$ or $\beta = j\omega_0$):**
    -   $x[n] = e^{j \omega_0 n}$
-   **Sinusoidal Form:**
    -   $x[n] = A \cos(\omega_0 n + \phi)$
    -   $\omega_0$: discrete-time angular frequency (radians).
-   **Euler's Relation (same arithmetic form as CT):**
    $$
    e^{j \omega_0 n}=\cos \omega_0 n+j \sin \omega_0 n \tag{1.48}
    $$
    $$
    A \cos (\omega_0 n+\phi)=\frac{A}{2} e^{j \phi} e^{j \omega_0 n}+\frac{A}{2} e^{-j \phi} e^{-j \omega_0 n} \tag{1.49}
    $$

---

## Discrete-Time Sinusoidal Signals

-   Like continuous-time, these signals have infinite total energy but finite average power (e.g., $P_{\text{avg}}=1$ for $e^{j \omega_0 n}$).

```{=html}
<img src="https://cdn.mathpix.com/cropped/2024_02_14_ad5c48a840b9702e9410g-055.jpg?height=483&width=1115&top_left_y=213&top_left_x=380" alt="DT sinusoid a" style="width: 32%; display: inline-block;">
<img src="https://cdn.mathpix.com/cropped/2024_02_14_ad5c48a840b9702e9410g-055.jpg?height=493&width=1133&top_left_y=784&top_left_x=364" alt="DT sinusoid b" style="width: 32%; display: inline-block;">
<img src="https://cdn.mathpix.com/cropped/2024_02_14_ad5c48a840b9702e9410g-055.jpg?height=442&width=1133&top_left_y=1410&top_left_x=364" alt="DT sinusoid c" style="width: 32%; display: inline-block;">
```
Figure 1.25: Discrete-time sinusoidal signals.

::: {.notes}
Discrete-time sinusoids are prevalent in digital signal processing (DSP), such as digital audio synthesis, image processing algorithms, and digital communications systems. Their properties are slightly different from CT sinusoids, especially concerning periodicity and frequency uniqueness, which we will discuss next. Visually, they are simply samples taken from an underlying continuous-time sinusoid.
:::

---

## Discrete-Time General Complex Exponential Signals

If $C = |C|e^{j\theta}$ (amplitude) and $\alpha = |\alpha|e^{j\omega_0}$ (rate of change + frequency):
$$
C \alpha^n = |C| |\alpha|^n \cos (\omega_0 n+\theta)+j|C| |\alpha|^n \sin (\omega_0 n+\theta) \tag{1.50}
$$

-   $|\alpha|=1$: Purely sinusoidal samples (constant amplitude oscillations).
-   $|\alpha|<1$: **Decaying** sinusoidal samples (damped oscillations, e.g., digital filter responses).
-   $|\alpha|>1$: **Growing** sinusoidal samples (unstable system responses).

---

## Discrete-Time General Complex Exponential Signals

```{=html}
<img src="https://cdn.mathpix.com/cropped/2024_02_14_ad5c48a840b9702e9410g-056.jpg?height=1002&width=1086&top_left_y=849&top_left_x=394" alt="DT damped/growing sinusoids" style="width: 70%;">
```
Figure 1.26: (a) Growing discrete-time sinusoidal signals; (b) decaying discrete-time sinusoid.

::: {.notes}
Similar to continuous time, these complex exponentials serve as general solutions to discrete-time linear difference equations with constant coefficients, which are mathematical models for many discrete-time systems (e.g., digital filters). The $|\alpha|$ term determines the envelope's growth or decay, and $\omega_0$ determines the oscillation frequency. Understanding these is key to stability analysis in digital filters and control systems.
:::

---

## Periodicity & Frequency Differences (Discrete-Time vs. Continuous-Time)

A key distinction between discrete-time and continuous-time complex exponentials that impacts frequency analysis.

:::: {.columns}
::: {.column width="40%"}
### Continuous-Time $e^{j \omega_0 t}$:

1.  **Distinct Frequencies:** All signals $e^{j \omega_0 t}$ are distinct for distinct values of $\omega_0$. An infinite number of unique frequencies.
:::
::: {.column width="60%"}
### Discrete-Time $e^{j \omega_0 n}$:

1.  **Non-Distinct Frequencies (Aliasing):** Frequencies separated by multiples of $2\pi$ are *identical*.
    $$
    e^{j(\omega_0+2\pi)n} = e^{j\omega_0 n} \tag{1.51}
    $$
    *   Only need to consider $\omega_0$ in an interval of length $2\pi$ (e.g., $[0, 2\pi)$ or $(-\pi, \pi]$). All frequencies outside this interval are "aliases" of frequencies within it.
:::
::::

::: {.notes}
This slide is critical. The "folding" or "aliasing" of frequencies in discrete-time is a very important concept with practical implications, directly related to the **Nyquist-Shannon sampling theorem**. Explain that a high frequency like $\omega_0 = 1.9\pi$ looks very similar to a low frequency like $\omega_0 = -0.1\pi$ (which is effectively equivalent to $0.1\pi$ in terms of oscillation *rate* but reflected). The fastest oscillation is always at $\omega_0 = \pi$. This difference arises because sampling can cause higher frequencies to appear as lower frequencies.
:::

---

## Periodicity & Frequency Differences (Discrete-Time vs. Continuous-Time)

A key distinction between discrete-time and continuous-time complex exponentials that impacts frequency analysis.

:::: {.columns}
::: {.column width="40%"}
### Continuous-Time $e^{j \omega_0 t}$:

2.  **Periodicity:** Periodic for *any* value of $\omega_0$ (except $\omega_0=0$ where period is undefined but the signal is constant).
    *   $T_0 = 2\pi/|\omega_0|$ (for $\omega_0 \ne 0$).
:::
::: {.column width="60%"}
### Discrete-Time $e^{j \omega_0 n}$:

2.  **Conditional Periodicity:** Periodic *only if* $\omega_0 / (2\pi)$ is a **rational number**.
    *   $\omega_0 N = 2\pi m \implies \frac{\omega_0}{2\pi} = \frac{m}{N}$ (for coprime integers $m, N>0$).
    *   Fundamental Period $N = m(2\pi/\omega_0)$ (if $m,N$ are coprime).
    *   If $\omega_0 / (2\pi)$ is irrational (e.g., $\omega_0 = 1$), the signal is aperiodic.
    *   $T_0 = 2\pi/|\omega_0|$ (for $\omega_0 \ne 0$).
:::
::::

---

## Periodicity & Frequency Differences (Discrete-Time vs. Continuous-Time)

A key distinction between discrete-time and continuous-time complex exponentials that impacts frequency analysis.

:::: {.columns}
::: {.column width="40%"}
### Continuous-Time $e^{j \omega_0 t}$:

3.  **Frequency Rate:** Increasing $|\omega_0|$ always increases the rate of oscillation. No upper bound on frequency.
:::
::: {.column width="60%"}
### Discrete-Time $e^{j \omega_0 n}$:

3.  **Frequency Rate:** Rate of oscillation increases as $\omega_0$ goes from $0$ to $\pi$, then *decreases* from $\pi$ to $2\pi$ (or $-\pi$).
    *   $\omega_0 = 0, 2\pi, \ldots$ are "DC" or slowest.
    *   $\omega_0 = \pm \pi, \pm 3\pi, \ldots$ are "fastest" ($e^{j \pi n} = (-1)^n$, alternating sample by sample).
:::
::::

---

## Demo: Discrete-Time Frequency Behavior

Observe unique frequency behavior in discrete-time sinusoids due to the sampling process.

```{pyodide}
#| max-lines: 10
import numpy as np
import matplotlib.pyplot as plt

# Function to plot a discrete-time cosine wave
def plot_dt_frequency_behavior(omega0_val):
    n = np.arange(-10, 11) # Discrete time points
    x_n = np.cos(omega0_val * n)

    fig, ax = plt.subplots(figsize=(7, 5))
    ax.stem(n, x_n, linefmt='b-', markerfmt='bo', basefmt='r-',
            label=f'$x[n] = \\cos({omega0_val:.2f}n)$')
  
    ax.set_title(f'Discrete-Time Cosine Wave: $\\omega_0 = {omega0_val:.2f}$')
    ax.set_xlabel('Sample (n)')
    ax.set_ylabel('Amplitude')
    ax.grid(True)
    ax.axvline(0, color='gray', linestyle=':', linewidth=0.8) # Mark n=0
    ax.axhline(0, color='gray', linestyle=':', linewidth=0.8) # Mark y=0
    ax.set_ylim(-1.1, 1.1) # Fixed Y-limits for clear comparison
    ax.legend()
    plt.tight_layout()
    plt.show()

# Default value for the angular frequency omega0
# Change this value directly in the code to explore different behaviors
# Range is slightly beyond 2*pi to clearly show periodicity
omega0_val_default_dt_freq = 0.5

print("Discrete-Time Frequency Behavior Demo (adjust omega_0 from 0 to 2*pi):")
# Call the plotting function with the default value
plot_dt_frequency_behavior(omega0_val_default_dt_freq)
```

::: {.notes}
**Experiment by changing `omega0_val_default_dt_freq` (angular frequency) in the code:**
-   **`omega0_val_default_dt_freq` near 0 (e.g., 0.1 or 0.2):** Very slow oscillation, almost a constant (DC).
-   **Increase `omega0_val_default_dt_freq` towards `π` (approximately 3.14):** The oscillation rate increases. The samples become more spread out relative to the number of cycles within a range.
-   **`omega0_val_default_dt_freq = π`:** The signal becomes $cos(\pi n) = (-1)^n$, which is the fastest possible oscillation in discrete time (alternating between 1 and -1 at each sample). This is the **Nyquist frequency**.
-   **Increase `omega0_val_default_dt_freq` from `π` towards `2π` (approximately 6.28):** The oscillation rate *decreases* again (it starts to "fold back"). For example, `ω_0 = 1.9π` will look identical to a signal with frequency `-0.1π` (which is effectively seen as `0.1π`).
-   **`omega0_val_default_dt_freq = 2π` (or 0):** The signal becomes $cos(2\pi n) = \cos(0) = 1$, which is a constant DC signal.
This demonstrates how frequencies greater than $\pi$ are effectively "aliased" to lower frequencies within the fundamental range $[0, 2\pi)$.
:::

---

## Example 1.6: Fundamental Period of Sum of DT Exponentials

**Problem:** Determine the fundamental period of the discrete-time signal $x[n]=e^{j(2 \pi / 3) n}+e^{j(3 \pi / 4) n}$.

**Step-by-Step Solution:**

1.  **Analyze the first term:** $x_1[n] = e^{j(2 \pi / 3) n}$
    -   For $x_1[n]$ to be periodic with period $N_1$, we need $e^{j(2\pi/3)(n+N_1)} = e^{j(2\pi/3)n}$.
    -   This implies $e^{j(2\pi/3)N_1} = 1$.
    -   So, $(2\pi/3)N_1$ must be an integer multiple of $2\pi$.
    -   $(2\pi/3)N_1 = 2\pi k_1 \Rightarrow N_1/3 = k_1$.
    -   The smallest positive integer $N_1$ occurs when $k_1=1$, so $N_1=\mathbf{3}$.

---

## Example 1.6: Fundamental Period of Sum of DT Exponentials

2.  **Analyze the second term:** $x_2[n] = e^{j(3 \pi / 4) n}$
    -   Similarly, we need $e^{j(3\pi/4)N_2} = 1$.
    -   So, $(3\pi/4)N_2 = 2\pi k_2 \Rightarrow (3/4)N_2 = 2 k_2$.
    -   $N_2 = (8/3) k_2$. For $N_2$ to be an integer, $k_2$ must be a multiple of 3.
    -   The smallest positive integer $N_2$ occurs when $k_2=3$, so $N_2 = (8/3) \times 3 = \mathbf{8}$.

3.  **Find the overall fundamental period:** For the entire signal $x[n]$ to repeat, both $x_1[n]$ and $x_2[n]$ must complete an integer number of their respective fundamental periods simultaneously.
    -   This means the overall period of $x[n]$ must be a common multiple of $N_1=3$ and $N_2=8$.
    -   The fundamental period is the **Least Common Multiple (LCM)** of $N_1$ and $N_2$.
    -   LCM(3, 8) = $\mathbf{24}$.

**Conclusion:** The fundamental period of $x[n]$ is $\mathbf{24}$.

::: {.notes}
This is a standard problem type when dealing with discrete-time periodic signals. Emphasize that for a sum of periodic discrete-time signals, the overall signal is periodic if and only if all individual signals are periodic. Its fundamental period is the LCM of their individual fundamental periods, assuming there isn't a cancellation effect (e.g., if one signal is the negative of another after some shift). This understanding is crucial for designing periodic sequences in digital systems.
:::

---

## Harmonically Related Discrete-Time Complex Exponentials

-   Set of periodic exponentials with a common period $N$:
    $$
    \phi_k[n]=e^{j k(2 \pi / N) n}, \quad k=0, \pm 1, \pm 2, \ldots \tag{1.60}
    $$
-   **Crucial Difference from CT (due to frequency aliasing):** Unlike continuous time, these are **not all distinct**.
    $$
    \phi_{k+N}[n] = e^{j(k+N)(2\pi/N)n} = e^{j k(2\pi/N)n} e^{j 2\pi n} = \phi_k[n] \tag{1.61}
    $$
    Since $e^{j 2\pi n} = (e^{j 2\pi})^n = 1^n = 1$.
-   Therefore, there are only **N distinct** periodic exponentials in this set:
    $$
    \phi_0[n], \phi_1[n], \ldots, \phi_{N-1}[n] \tag{1.62}
    $$
    Any other $\phi_k[n]$ is identical to one of these (e.g., $\phi_N[n]=\phi_0[n]$, $\phi_{-1}[n]=\phi_{N-1}[n]$).

::: {.notes}
This property is fundamental to the **Discrete Fourier Transform (DFT)** and **Discrete Fourier Series (DFS)**. It means that when analyzing discrete-time signals over a finite period $N$, there are only a finite number ($N$) of unique frequencies or harmonics you can extract. This is a direct consequence of the sampling process inherent in discrete-time systems. It implies that information about frequencies beyond the Nyquist frequency is lost or "folded" down.
:::

---

## Comparison Summary: $e^{j \omega_0 t}$ vs. $e^{j \omega_0 n}$

| Feature                   | Continuous-Time ($e^{j \omega_0 t}$)                                | Discrete-Time ($e^{j \omega_0 n}$)                                                                 |
| :------------------------ | :-------------------------------------------------------------------- | :------------------------------------------------------------------------------------------------- |
| **Distinctness of Freqs** | Distinct signals for distinct values of $\omega_0$. Infinite unique frequencies. | Identical signals for values of $\omega_0$ separated by multiples of $2\pi$. Only $2\pi$ range of unique frequencies. |
| **Periodicity**           | Periodic for any choice of $\omega_0$ (except $\omega_0=0$).         | Periodic only if $\omega_0 = 2\pi m / N$ for some positive integers $N$ and $m$.                  |
| **Fundamental Frequency** | $\omega_0$ (for $\omega_0 \ne 0$)                                     | $\omega_0 / m$ (for $\omega_0 \ne 0$, assuming $m,N$ are coprime).                                |
| **Fundamental Period**    | $\omega_0=0$: undefined<br>$\omega_0 \ne 0: \frac{2\pi}{|\omega_0|}$     | $\omega_0=0$: undefined<br>$\omega_0 \ne 0: N = m\left(\frac{2\pi}{\omega_0}\right)$ (if $m,N$ coprime) |
| **Highest Oscillation Rate** | As $\omega_0 \rightarrow \pm \infty$                                 | At $\omega_0 = \pi$ (or odd multiples of $\pi$)                                                    |
| **Lowest Oscillation Rate** | At $\omega_0 = 0$                                                    | At $\omega_0 = 0$ (or even multiples of $2\pi$)                                                    |

::: {.notes}
Review this table thoroughly. It synthesizes the most important differences and highlights why Discrete-Time Signal Processing requires careful consideration of frequency ranges and periodicity, topics that are less complex in continuous time. This table is essentially a cheat sheet for avoiding common misconceptions when transitioning from continuous to discrete domain, especially concerning frequency.
:::

---

## Conclusion

We've introduced fundamental continuous-time and discrete-time signals:

*   **Exponential Signals:**
    *   Real exponentials: excellent models for growth or decay phenomena.
    *   Complex exponentials: fundamental "building blocks" related to rotation, basis for all sinusoids.
    *   General complex exponentials: model damped or growing oscillatory responses, common in LTI systems.
*   **Sinusoidal Signals:**
    *   Represent pure, stable oscillations, deeply connected to complex exponentials via Euler's relation.
    *   Ubiquitous in nature and engineering (AC circuits, mechanical vibrations, wave propagation).

---

## Conclusion

**Key Takeaways on Differences:**

*   Continuous-time signals have distinct frequencies across the entire real number line.
*   Discrete-time signals have frequencies that repeat every $2\pi$ (aliasing).
*   Discrete-time signals are periodic only if their frequency is a **rational multiple of $2\pi$**.

These simple signals are profound building blocks for understanding linearity, time-invariance, and the powerful frequency domain analysis of signals and systems, which we will explore in subsequent chapters.

::: {.notes}
Reiterate the "building blocks" idea and how these signals will appear repeatedly throughout the course, especially when analyzing systems and using Fourier techniques. Emphasize the unique characteristics of discrete-time signals as they will be central in DSP courses. Understanding these basic signals at an intuitive level is paramount for mastering the rest of the Signals and Systems curriculum.
:::
