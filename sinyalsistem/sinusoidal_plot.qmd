---
title: "Interactive Sinusoidal Plot"
subtitle: "Using Pyodide and Observable JS in Quarto"
format:
  live-revealjs:
    logo: "qrjs_assets/unsoed_logo.png"
    footer: "[irosyadi-2025](https://imron-slide.vercel.app)"
    slide-number: true
    chalkboard: true
    scrollable: true
    controls: true
    progress: true
    preview-links: true
    transition: fade
    incremental: false
    theme: [default, qrjs_assets/ir_style.scss]
pyodide:
  packages:
    - numpy
    - plotly
    - nbformat
---

## Sinusoidal Wave

```{ojs}
viewof ampRange = Inputs.range([0.1, 2.0], {value: 1, step: 0.1, label: "Amplitude"});

amplitude = debounce(viewof ampRange);

// Debounce function to prevent rapid updates
function debounce(input, delay = 500) {
  return Generators.observe(notify => {
    let timer = null;
    let value;
    function inputted() {
      if (timer !== null) return;
      notify(value = input.value);
      timer = setTimeout(delayed, delay);
    }
    function delayed() {
      timer = null;
      if (value === input.value) return;
      notify(value = input.value);
    }
    input.addEventListener("input", inputted), inputted();
    return () => input.removeEventListener("input", inputted);
  });
}
```

```{pyodide}
#| edit: false
#| echo: false
#| input:
#|   - amplitude

import plotly.graph_objects as go
import numpy as np

# Generate time vector
t = np.linspace(0, 10, 500)

# Define fixed frequency and phase
frequency = 1
phase = 0

# Generate sinusoidal data
y = amplitude * np.sin(frequency * t + phase)

# Create Plotly figure
fig = go.Figure()

# Add trace for the sinusoidal wave
fig.add_trace(
    go.Scatter(
        x=t,
        y=y,
        mode='lines',
        line=dict(width=4)
    )
)

# Update layout
fig.update_layout(
    xaxis_title="Time (s)",
    yaxis_title="Amplitude",
    yaxis=dict(range=[-2.1, 2.1]),
    width=800,
    margin=dict(l=0, r=0, b=0, t=0)
)

# Display the figure
fig
```