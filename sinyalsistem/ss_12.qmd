---
title: "Signal and Systems"
# subtitle: "1.2 Transformations of the Independent Variable"
author: "Imron Rosyadi"
format:
  live-revealjs:
    logo: "qrjs_assets/unsoed_logo.png"
    footer: "[irosyadi-2025](https://imron-slide.vercel.app)"
    slide-number: true
    chalkboard: true
    scrollable: true
    controls: true
    progress: true
    preview-links: false
    transition: fade
    incremental: false
    smaller: false
    theme: [default, qrjs_assets/ir_style.scss]
filters:
  - pyodide
---

# 1.2 Transformations of the Independent Variable

---

## Introduction: Why Transformations?

A central concept in signal and system analysis is the **transformation of a signal**.

-   **Aircraft Control Systems:**
    -   Pilot actions (signals) are transformed by electrical and mechanical systems.
    -   Resulting in changes to thrust, control surface positions, aircraft velocity, and heading.
-   **High-Fidelity Audio Systems:**
    -   Input signal (music) is modified.
    -   To enhance desirable characteristics, remove noise, or balance components (e.g., treble & bass).

These transformations allow us to introduce **basic properties of signals and systems**, playing a crucial role in their definition and characterization.

::: {.notes}
The core idea is that signals rarely exist in isolation; they are continuously modified, processed, and affected by the systems they pass through. Understanding these transformations, especially simple ones involving the time axis, sets the foundation for more complex system analysis.

For instance, in aerospace, a pilot's joystick movement (a signal) isn't directly translated into rudder movement. It goes through sensors, analog-to-digital converters, flight control computers (performing complex transformations), digital-to-analog converters, and actuators before physically moving the rudder. Each stage is a transformation.
:::

---

## Time Shift: Continuous-Time Signals

A fundamental transformation where the signal's shape remains the same, but its position on the time *t*-axis changes.

:::: {.columns}
::: {.column}
-   **Definition:** $x(t-t_0)$
    -   **Delayed** version of $x(t)$ if $t_0 > 0$.
    -   **Advanced** version of $x(t)$ if $t_0 < 0$.
:::
::: {.column}
```{=html}
<img src="https://cdn.mathpix.com/cropped/2024_02_14_ad5c48a840b9702e9410g-040.jpg?height=652&width=618&top_left_y=325&top_left_x=188" alt="Continuous-time signals related by a time shift" style="width: 75%;">
```
:::
::::

**Applications:**
-   Radar, sonar, and seismic signal processing: Signals arriving at different receivers at different times due to propagation delays.

::: {.notes}
Think of $x(t)$ as an original event. If you want some value of $x(t)$ that occurred at time $t_{event}$ to now appear at $t_{new}$ in the transformed signal $x(t-t_0)$, then $(t_{new} - t_0) = t_{event}$, which means $t_{new} = t_{event} + t_0$.
-   If $t_0 > 0$, $t_{new}$ is later than $t_{event}$, hence it's a **delay**.
-   If $t_0 < 0$, $t_{new}$ is earlier than $t_{event}$, hence it's an **advance**.
The provided figure 1.9 shows $t_0 < 0$, meaning $x(t-t_0)$ is an advanced version of $x(t)$.
:::

---

## Time Shift: Discrete-Time Signals

Analogous to continuous-time, but for discrete samples.

:::: {.columns}
::: {.column width="50%"}
-   **Definition:** $x[n-n_0]$
    -   The signal $x[n]$ is shifted by $n_0$ samples.
    -   If $n_0 > 0$, it's a delay.
    -   If $n_0 < 0$, it's an advance.
:::
::: {.column width="50%"}
```{=html}
<img src="https://cdn.mathpix.com/cropped/2024_02_14_ad5c48a840b9702e9410g-039.jpg?height=846&width=812&top_left_y=1320&top_left_x=262" alt="Discrete-time signals related by a time shift" style="width: 65%;">
```
:::
::::

In this figure, $n_0 > 0$, so $x[n-n_0]$ is a delayed version of $x[n]$. Each point in $x[n]$ occurs later in $x[n-n_0]$.

::: {.notes}
Discrete-time shifts are fundamental in digital signal processing, for example, in implementing delay lines, echo effects, or buffering data in communications systems.
The variable `n` represents the sample index, typically integers.
:::

---

## Time Reversal (Reflection)

This transformation reflects the signal about the origin of the independent variable ($t=0$ or $n=0$).

**Analogy:** If $x(t)$ is an audio recording, then $x(-t)$ is that recording played backward.

---

## Time Reversal (Reflection)

:::: {.columns}
::: {.column width="50%"}
**Continuous Time:**

-   **Definition:** $x(-t)$
-   Obtained by reflection about $t=0$.

```{=html}
<img src="https://cdn.mathpix.com/cropped/2024_02_14_ad5c48a840b9702e9410g-040.jpg?height=359&width=787&top_left_y=1265&top_left_x=228" alt="Continuous-time signal x(t)" style="width: 60%;">
```
(a) $x(t)$
```{=html}
<img src="https://cdn.mathpix.com/cropped/2024_02_14_ad5c48a840b9702e9410g-040.jpg?height=347&width=785&top_left_y=1716&top_left_x=227" alt="Continuous-time signal x(-t)" style="width: 60%;">
```
(b) $x(-t)$
:::
::: {.column width="50%"}
**Discrete Time:**

-   **Definition:** $x[-n]$
-   Obtained by reflection about $n=0$.

```{=html}
<img src="https://cdn.mathpix.com/cropped/2024_02_14_ad5c48a840b9702e9410g-040.jpg?height=338&width=804&top_left_y=252&top_left_x=839" alt="Discrete-time signal x[n]" style="width: 60%;">
```
(a) $x[n]$
```{=html}
<img src="https://cdn.mathpix.com/cropped/2024_02_14_ad5c48a840b9702e9410g-040.jpg?height=348&width=805&top_left_y=687&top_left_x=839" alt="Discrete-time signal x[-n]" style="width: 60%;">
```
(b) $x[-n]$
:::
::::

::: {.notes}
Time reversal is key for understanding concepts like system causality, stability, and in operations like convolution, where one signal is often reversed. Visually, imagine folding the graph paper along the vertical axis at $t=0$ or $n=0$.
:::

---

## Time Scaling

This transformation compresses or stretches the signal along the time axis.

-   **Definition:** $x(\alpha t)$ (or $x[\alpha n]$)
    -   **Linearly Compressed** if $|\alpha| > 1$ (e.g., $x(2t)$). The signal plays faster.
    -   **Linearly Stretched** if $|\alpha| < 1$ (e.g., $x(t/2)$). The signal plays slower.
    -   If $\alpha < 0$, it also involves a time reversal.

**Analogy:** Playing an audio recording at twice the speed ($x(2t)$) or half the speed ($x(t/2)$).

---

## Time Scaling

```{=html}
<img src="https://cdn.mathpix.com/cropped/2024_02_14_ad5c48a840b9702e9410g-040.jpg?height=800&width=568&top_left_y=1302&top_left_x=1045" alt="Continuous-time signals related by time scaling" style="width: 30%;">
```
(Top: $x(t)$; Middle: $x(2t)$; Bottom: $x(t/2)$)

::: {.notes}
For $x(\alpha t)$, the value of $x(t)$ at $t=t_0$ will appear in $x(\alpha t)$ at $t = t_0/\alpha$.
-   If $|\alpha| > 1$, then $|t_0/\alpha| < |t_0|$, meaning the signal duration is compressed.
-   If $|\alpha| < 1$, then $|t_0/\alpha| > |t_0|$, meaning the signal duration is stretched.
This is a critical transformation in frequency analysis (e.g., Fourier Transform), as time scaling in one domain corresponds to frequency scaling in the other.
:::

---

## Combined Transformations: $x(\alpha t + \beta)$

Such transformations preserve the shape of $x(t)$, but the resulting signal may be:  

-   Linearly stretched if $|\alpha|<1$  
-   Linearly compressed if $|\alpha|>1$  
-   Reversed in time if $\alpha<0$  
-   Shifted in time if $\beta$ is nonzero  

---

## Combined Transformations: $x(\alpha t + \beta)$

**Systematic Approach to $x(\alpha t + \beta)$:**

1.  **Shift:** First, `delay or advance` $x(t)$ in accordance with the value of $\beta$. This gives an intermediate signal, e.g., $y(t) = x(t+\beta)$.
2.  **Scale/Reverse:** Then, `perform time scaling and/or time reversal` on the resulting signal $y(t)$ in accordance with the value of $\alpha$. This means replacing $t$ with $\alpha t$ in $y(t)$, resulting in $y(\alpha t) = x(\alpha t + \beta)$.

::: {.notes}
It's critical to perform these operations in the correct order. The method described (shift first, then scale/reverse) is generally intuitive and widely used. An alternative is to factor out $\alpha$: $x(\alpha(t + \beta/\alpha))$. This implies a shift by $-\beta/\alpha$ *after* scaling, which can be confusing. Sticking to the text's method: shift $x(t)$ by $\beta$ to get $x(t+\beta)$, then substitute $t \rightarrow \alpha t$ to get $x(\alpha t + \beta)$.
:::

---

## Example 1.1: Shift and Reversal

Given $x(t)$ in Figure (a), let's find $x(t+1)$ and $x(-t+1)$.

:::: {.columns}
::: {.column width="60%"}
**a. Original Signal:** $x(t)$

**b. Transformation 1: $x(t+1)$**

-   This corresponds to an **advance (shift to the left) by one unit** along the $t$-axis.

**c. Transformation 2: $x(-t+1)$**

-   This signal is the **time-reversed version of $x(t+1)$**.
-   It is obtained graphically by reflecting $x(t+1)$ about the $t$-axis.
:::
::: {.column width="40%"}
```{=html}
<img src="https://cdn.mathpix.com/cropped/2024_02_14_ad5c48a840b9702e9410g-041.jpg?height=198&width=830&top_left_y=451&top_left_x=647" alt="Signal x(t)" style="width: 100%;">
```
(a)

```{=html}
<img src="https://cdn.mathpix.com/cropped/2024_02_14_ad5c48a840b9702e9410g-041.jpg?height=201&width=938&top_left_y=756&top_left_x=552" alt="Signal x(t+1)" style="width: 100%;">
```
(b)

```{=html}
<img src="https://cdn.mathpix.com/cropped/2024_02_14_ad5c48a840b9702e9410g-041.jpg?height=201&width=926&top_left_y=1083&top_left_x=556" alt="Signal x(-t+1)" style="width: 100%;">
```
(c)
:::
::::

::: {.notes}
Walk through the points:
For $x(t+1)$:
- The point at $t=0$ in $x(t)$ moves to $t=-1$ in $x(t+1)$.
- The point at $t=1$ in $x(t)$ moves to $t=0$ in $x(t+1)$.
- The point at $t=2$ in $x(t)$ moves to $t=1$ in $x(t+1)$.
This confirms the shift to the left (advance).

For $x(-t+1)$:
- Take the signal $x(t+1)$ (from Figure b).
- Reflect it about the vertical axis ($t=0$).
- The point at $t=-1$ in $x(t+1)$ moves to $t=1$ in $x(-t+1)$.
- The point at $t=0$ in $x(t+1)$ stays at $t=0$ in $x(-t+1)$.
- The point at $t=1$ in $x(t+1)$ moves to $t=-1$ in $x(-t+1)$.
This precisely matches Figure (c).
:::

---

## Example 1.2: Time Scaling

Given $x(t)$ in Figure (a), let's find $x(\frac{3}{2} t)$.

:::: {.columns}
::: {.column width="60%"}
**a. Original Signal:** $x(t)$

**d. Transformation: $x(\frac{3}{2} t)$**

-   This corresponds to a **linear compression of $x(t)$ by a factor of $\frac{2}{3}$**. Since $|\alpha| = \frac{3}{2} > 1$.
-   The value of $x(t)$ at $t=t_0$ occurs in $x(\frac{3}{2} t)$ at $t=\frac{2}{3} t_0$. E.g., $x(1)$ is found in $x(\frac{3}{2} t)$ at $t=\frac{2}{3}$.
-   Since $x(t)$ is zero for $t<0$, $x(\frac{3}{2} t)$ is zero for $t<0$.
-   Since $x(t)$ is zero for $t>2$, $x(\frac{3}{2} t)$ is zero for $t > \frac{4}{3}$.
:::
::: {.column width="40%"}
```{=html}
<img src="https://cdn.mathpix.com/cropped/2024_02_14_ad5c48a840b9702e9410g-041.jpg?height=198&width=830&top_left_y=451&top_left_x=647" alt="Signal x(t)" style="width: 100%;">
```
(a)

```{=html}
<img src="https://cdn.mathpix.com/cropped/2024_02_14_ad5c48a840b9702e9410g-041.jpg?height=263&width=848&top_left_y=1373&top_left_x=645" alt="Signal x(3/2 t)" style="width: 100%;">
```
(d)
:::
::::

::: {.notes}
Explain intuitively what "compression by a factor of 2/3" means. It means the signal "finishes" in 2/3 of the original time.
- Original signal $x(t)$ starts at $t=0$ and ends at $t=2$.
- The transformed signal $x(\frac{3}{2} t)$ starts when $\frac{3}{2} t = 0 \Rightarrow t=0$.
- It ends when $\frac{3}{2} t = 2 \Rightarrow t = 2 \times \frac{2}{3} = \frac{4}{3}$.
The duration of the signal has indeed been compressed from $2$ to $4/3$.
:::

---

## Example 1.3: Combined Shift & Scale

Suppose we want to determine $x(\frac{3}{2} t+1)$ for the signal $x(t)$ from Figure (a).

1.  **Shift based on $\beta=1$:**
    -   First, **advance** (shift to the left) $x(t)$ by 1.
    -   This yields the signal $x(t+1)$, shown in Figure (b), which we analyzed in Example 1.1.
    ```{=html}
    <img src="https://cdn.mathpix.com/cropped/2024_02_14_ad5c48a840b9702e9410g-041.jpg?height=201&width=938&top_left_y=756&top_left_x=552" alt="Signal x(t+1)" style="width: 80%;">
    ```
    (b) $x(t+1)$

---

## Example 1.3: Combined Shift & Scale

2.  **Scale based on $\alpha=\frac{3}{2}$:**
    -   Now, take $x(t+1)$ and substitute $t \rightarrow \frac{3}{2}t$ to get $x(\frac{3}{2}t+1)$.
    -   This linearly **compresses** the signal $x(t+1)$ by a factor of $\frac{2}{3}$.
    -   The signal $x(t+1)$ exists for $t \in [-1, 1]$.
    -   So $x(\frac{3}{2}t+1)$ exists for $\frac{3}{2}t \in [-1, 1] \implies t \in [-\frac{2}{3}, \frac{2}{3}]$.
    ```{=html}
    <img src="https://cdn.mathpix.com/cropped/2024_02_14_ad5c48a840b9702e9410g-041.jpg?height=217&width=959&top_left_y=1690&top_left_x=530" alt="Signal x(3/2 t + 1)" style="width: 80%;">
    ```
    (e) $x(\frac{3}{2} t+1)$

::: {.notes}
Reinforce the general rule for $x(\alpha t + \beta)$:
1. Apply the shift related to $\beta$ to the *original* signal's time variable. So, $x(t) \rightarrow x(t+\beta)$.
2. Apply the scaling/reversal related to $\alpha$ to the *new* time variable of the shifted signal. So, $x(t+\beta) \rightarrow x(\alpha t + \beta)$.

This order (shift then scale) is common and easy to visualize. Alternative (factor $\alpha$ first): $x(\alpha(t+\beta/\alpha))$. This would imply scaling $x(t)$ to $x(\alpha t)$, then shifting $x(\alpha t)$ by $-\beta/\alpha$. Both methods yield the same result but require careful attention to the order and interpretation of the shift parameter.
:::

---

## Interactive Demo: Signal Transformations

Explore how time shifting, scaling, and reversal affect a signal.

Let's use a simple triangular pulse signal.

```{pyodide}
#| max-lines: 10

import numpy as np
import matplotlib.pyplot as plt

# Define the original signal x(t) (a triangular pulse)
def x(t):
    return np.maximum(0, 1 - np.abs(t - 0.5)) if np.isscalar(t) else np.maximum(0, 1 - np.abs(t - 0.5))

# Vectorize x for array input
x_vec = np.vectorize(x)

# Define the transformed signal x(alpha*t + beta)
def transformed_x(t, alpha, beta):
    return x_vec(alpha * t + beta)

# Plotting function
def plot_signal(alpha, beta):
    t_original = np.linspace(-2, 3, 500)
    t_transformed = np.linspace(-3, 4, 500) # Wider range for transformed signal

    fig, ax = plt.subplots(figsize=(7, 4))

    # Plot original signal
    ax.plot(t_original, x_vec(t_original), label=r'$x(t)$', color='blue', linestyle='--')

    # Plot transformed signal
    ax.plot(t_transformed, transformed_x(t_transformed, alpha, beta), label=r'$x(\alpha t + \beta)$', color='red')

    ax.set_title(f'Signal Transformation: $x({alpha:.2f}t + {beta:.2f})$')
    ax.set_xlabel('Time (t)')
    ax.set_ylabel('Amplitude')
    ax.grid(True)
    ax.legend()
    ax.axvline(0, color='gray', linestyle=':', linewidth=0.8)
    ax.axhline(0, color='gray', linestyle=':', linewidth=0.8)
    ax.set_ylim(-0.2, 1.2)
    plt.show()

# Set alpha and beta values directly here
alpha = 1.0
beta = 0.0

# Plot
plot_signal(alpha, beta)
```

::: {.notes}
Experiment with the parameters:
-   **`beta`:** Changes the horizontal position (shift). Positive `beta` means shifting left (advance), negative `beta` means shifting right (delay).
-   **`alpha`:**
    -   Values greater than 1: Compression.
    -   Values between 0 and 1: Stretching.
    -   Negative values: Reversal combined with compression/stretching.
    -   Try `alpha = -1` and `beta = 0` to see pure time reversal.
    -   Try `alpha = 0.5` and `beta = 0` to see stretching.
    -   Try `alpha = 2` and `beta = 0` to see compression.
:::

---

## Periodic Signals: Continuous Time

An important class of signals that repeat themselves over time.

-   **Definition:** A continuous-time signal $x(t)$ is periodic if there is a positive value of $T$ for which:
    $$
    x(t)=x(t+T) \quad \text{for all } t \tag{1.11}
    $$
    We say $x(t)$ is periodic with period $T$.

```{=html}
<img src="https://cdn.mathpix.com/cropped/2024_02_14_ad5c48a840b9702e9410g-043.jpg?height=277&width=1003&top_left_y=225&top_left_x=149" alt="A continuous-time periodic signal" style="width: 80%;">
```

---

## Periodic Signals: Continuous Time

-   **Fundamental Period ($T_0$):** The smallest positive value of $T$ for which $x(t)=x(t+T)$ holds.
    -   *Exception:* For a constant signal, the fundamental period is undefined, as it is periodic for any $T$.
-   **Aperiodic Signal:** A signal that is not periodic.

**Applications:** Natural responses of conserved energy systems (e.g., ideal LC circuits, frictionless mechanical systems) are often periodic.

::: {.notes}
Emphasize "for all values of $t$" in the definition. This means the *entire* signal must repeat. If a signal repeats but has a unique feature (like a discontinuity) that doesn't repeat, it's not periodic. This differentiates from signals that might look "locally" periodic.
:::

---

## Periodic Signals: Discrete Time

Similar to continuous-time, but defined for discrete samples.

-   **Definition:** A discrete-time signal $x[n]$ is periodic with period $N$, where $N$ is a positive **integer**, if:
    $$
    x[n]=x[n+N] \quad \text{for all } n \tag{1.12}
    $$
    If this holds, $x[n]$ is periodic with period $N$.

```{=html}
<img src="https://cdn.mathpix.com/cropped/2024_02_14_ad5c48a840b9702e9410g-043.jpg?height=292&width=773&top_left_y=1318&top_left_x=379" alt="A discrete-time periodic signal with fundamental period N0=3" style="width: 70%;">
```

---

## Periodic Signals: Discrete Time

-   **Fundamental Period ($N_0$):** The smallest positive integer value of $N$ for which $x[n]=x[n+N]$ holds.

::: {.notes}
The key difference for discrete-time is that the period $N$ *must be an integer*. This has implications when dealing with discrete-time sinusoids, where their periodicity depends on the ratio of their frequency to $2\pi$ being a rational number.
:::

---

## Example 1.4: Checking Periodicity

Consider the signal given by:
$$
x(t)=\left\{\begin{array}{ll}
\cos (t) & \text { if } t<0 \\
\sin (t) & \text { if } t \geq 0
\end{array}\right.
$$

```{=html}
<img src="https://cdn.mathpix.com/cropped/2024_02_14_ad5c48a840b9702e9410g-044.jpg?height=251&width=828&top_left_y=224&top_left_x=588" alt="The signal x(t) considered in Example 1.4" style="width: 80%;">
```

---

## Example 1.4: Checking Periodicity

**Analysis:**  

-   We know $\cos(t+2\pi)=\cos(t)$ and $\sin(t+2\pi)=\sin(t)$.
-   Individually, both cosine (for $t<0$) and sine (for $t \ge 0$) parts are periodic with period $2\pi$.
-   However, observe the **discontinuity at $t=0$**.
-   For $x(t)$ to be periodic, *every feature* in its shape must recur periodically.
-   The discontinuity at $t=0$ **does not recur** at $t=2\pi, 4\pi, \ldots$ or $t=-2\pi, -4\pi, \ldots$.

**Conclusion:** The signal $x(t)$ is **not periodic**.

::: {.notes}
This example highlights a common mistake. Just because components of a signal are periodic doesn't mean the composite signal is. The definition $x(t)=x(t+T)$ *for all t* is strict.
The jump at $t=0$ is unique. For $x(t)$ to be periodic with period $2\pi$, we would need $x(0) = x(2\pi)$.
$x(0) = \sin(0) = 0$.
But for $t<0$, values approaching $0$ from the left are $\cos(t)$, so $\lim_{t \to 0^-} x(t) = \cos(0) = 1$.
And for $t \ge 0$, values approaching $0$ from the right are $\sin(t)$, so $\lim_{t \to 0^+} x(t) = \sin(0) = 0$.
The mismatch at $t=0$ (specifically, $x(0)=0$ but immediately to its left it's 1) must repeat if it were periodic. But it clearly doesn't.
:::

---

## Interactive Demo: Constructing Periodic Signals

Let's visualize how periodicity works for continuous and discrete-time signals.

```{pyodide}
#| max-lines: 10

import numpy as np
import matplotlib.pyplot as plt

# Continuous-Time Periodic Signal
def plot_continuous_periodic(T0_val):
    fig, ax = plt.subplots(figsize=(7, 4))
    t = np.linspace(-3*T0_val, 3*T0_val, 500)  # Plot several periods

    # Define one period of a signal (e.g., a simple sawtooth wave)
    def sawtooth_period(t_local, period):
        return (t_local % period) / period

    # Extend the sawtooth_period to be periodic over the full range
    x_t = sawtooth_period(t, T0_val)

    ax.plot(t, x_t, color='blue', label=f'$x(t)$ with $T_0={T0_val}$')
    ax.axvline(0, color='gray', linestyle=':', linewidth=0.8)
    ax.axhline(0, color='gray', linestyle=':', linewidth=0.8)
    for i in range(-3, 4):  # Mark periods
        ax.axvline(i * T0_val, color='red', linestyle='--', linewidth=0.5, alpha=0.7)
    ax.set_title('Continuous-Time Periodic Signal')
    ax.set_xlabel('Time (t)')
    ax.set_ylabel('Amplitude')
    ax.set_ylim(-0.1, 1.1)
    ax.grid(True)
    ax.legend()
    plt.show()

# Discrete-Time Periodic Signal
def plot_discrete_periodic(N0_val):
    fig, ax = plt.subplots(figsize=(7, 4))
    n = np.arange(-2*N0_val, 3*N0_val + 1)  # Plot several periods

    # Define one period of a discrete signal (e.g., a simple sequence)
    base_signal = np.array([0, 1, 0, -1])  # This is period 4
    if N0_val < 1:
        N0_val = 1  # Prevent issues with N0_val=0

    # Repeat signal according to N0_val
    x_n = np.array([base_signal[i % N0_val] if i >= 0 and i < len(base_signal)
                    else base_signal[(i % N0_val + N0_val) % N0_val] for i in n])

    ax.stem(n, x_n, linefmt='b-', markerfmt='bo', basefmt='r-', label=f'$x[n]$ with $N_0={N0_val}$')
    ax.axvline(0, color='gray', linestyle=':', linewidth=0.8)
    ax.axhline(0, color='gray', linestyle=':', linewidth=0.8)
    for i in range(-2, 3):  # Mark periods
        ax.axvline(i * N0_val, color='red', linestyle='--', linewidth=0.5, alpha=0.7)
    ax.set_title('Discrete-Time Periodic Signal')
    ax.set_xlabel('Sample (n)')
    ax.set_ylabel('Amplitude')
    ax.set_ylim(-1.5, 1.5)
    ax.set_xticks(np.unique(n))
    ax.grid(True)
    ax.legend()
    plt.show()

# Set parameters here
T0_val = 1.0  # Continuous period
N0_val = 4    # Discrete period

# Run plots
print("Continuous-Time Periodic Signal Demo:")
plot_continuous_periodic(T0_val)

print("\nDiscrete-Time Periodic Signal Demo:")
plot_discrete_periodic(N0_val)

```

::: {.notes}
**Continuous-Time Demo:**
-   Observe how changing $T_0$ stretches or compresses the repeating pattern.
-   The dashed red lines indicate the start of each period.

**Discrete-Time Demo:**
-   Notice that $N_0$ must be an integer.
-   See how the sequence repeats after every $N_0$ samples.
-   If you were to set $N_0$ to a value that is not a multiple of the base signal's inherent periodicity (e.g., the `base_signal` has internal period 4), you'll see how only the *first* $N_0$ samples are truly repeated. For proper fundamental period, $N_0$ should be the smallest integer for which the specific signal repeats. In the stem plot, the red dashed lines show the declared $N_0$.
:::

---

## Even and Odd Signals

Signals can exhibit symmetry under time reversal.

:::: {.columns}
::: {.column width="50%"}
-   **Even Signal:** Identical to its time-reversed counterpart.
    -   **Continuous Time:**
        $$
        x(-t)=x(t) \tag{1.14}
        $$
    -   **Discrete Time:**
        $$
        x[-n]=x[n] \tag{1.15}
        $$
:::
::: {.column width="50%"}
```{=html}
<img src="https://cdn.mathpix.com/cropped/2024_02_14_ad5c48a840b9702e9410g-044.jpg?height=311&width=675&top_left_y=1342&top_left_x=361" alt="An even continuous-time signal" style="width: 50%;">
```
(a) Even continuous-time signal
:::
::::

---

## Even and Odd Signals

:::: {.columns}
::: {.column width="50%"}

-   **Odd Signal:** The negative of its time-reversed counterpart.
    -   **Continuous Time:**
        $$
        x(-t)=-x(t) \tag{1.16}
        $$
    -   **Discrete Time:**
        $$
        x[-n]=-x[n] \tag{1.17}
        $$
    -   **Property:** An odd signal must necessarily be $0$ at $t=0$ or $n=0$ (since $x(0) = -x(0) \implies 2x(0) = 0 \implies x(0)=0$).

:::
::: {.column width="50%"}

```{=html}
<img src="https://cdn.mathpix.com/cropped/2024_02_14_ad5c48a840b9702e9410g-044.jpg?height=392&width=679&top_left_y=1772&top_left_x=361" alt="An odd continuous-time signal" style="width: 70%;">
```
(b) Odd continuous-time signal

:::
::::

::: {.notes}
Visualize even signals as being symmetrical around the vertical axis (like a mirror image). Cosine functions are classic examples of even signals.
Visualize odd signals as being symmetrical with respect to the origin (rotate 180 degrees). Sine functions are classic examples of odd signals.
Emphasize why $x(0)$ must be zero for an odd signal. It's a key point.
:::

---

## Even-Odd Decomposition

Any signal can be uniquely broken down into a sum of an even signal and an odd signal.

For a continuous-time signal $x(t)$:

-   **Even Part:** $\mathcal{E} v\{x(t)\}$
    $$
    \mathcal{E} v\{x(t)\}=\frac{1}{2}[x(t)+x(-t)] \tag{1.18}
    $$

-   **Odd Part:** $\mathcal{O} d\{x(t)\}$
    $$
    \mathcal{O} d\{x(t)\}=\frac{1}{2}[x(t)-x(-t)] \tag{1.19}
    $$

-   **Decomposition:** $x(t) = \mathcal{E} v\{x(t)\} + \mathcal{O} d\{x(t)\}$

---

## Even-Odd Decomposition

These definitions hold analogously for discrete-time signals $x[n]$.

```{=html}
<img src="https://cdn.mathpix.com/cropped/2024_02_14_ad5c48a840b9702e9410g-045.jpg?height=1146&width=750&top_left_y=214&top_left_x=416" alt="Example of the even odd decomposition of a discrete-time signal" style="width: 60%;">
```
(Example of discrete-time decomposition)

::: {.notes}
Explain why these definitions work:
- To show $\mathcal{E} v\{x(t)\}$ is even: Replace $t$ with $-t$ in $\mathcal{E} v\{x(t)\}$. You get $\frac{1}{2}[x(-t)+x(t)] = \mathcal{E} v\{x(t)\}$.
- To show $\mathcal{O} d\{x(t)\}$ is odd: Replace $t$ with $-t$ in $\mathcal{O} d\{x(t)\}$. You get $\frac{1}{2}[x(-t)-x(t)] = -\frac{1}{2}[x(t)-x(-t)] = -\mathcal{O} d\{x(t)\}$.
- To show $x(t)$ is the sum: Add the two equations: $\frac{1}{2}[x(t)+x(-t)] + \frac{1}{2}[x(t)-x(-t)] = \frac{1}{2}x(t) + \frac{1}{2}x(-t) + \frac{1}{2}x(t) - \frac{1}{2}x(-t) = x(t)$.

This decomposition is incredibly useful in signal processing, simplifying analysis of complex signals by breaking them into symmetric components. E.g., for Fourier Series, even functions only have cosine terms; odd functions only have sine terms.
:::

---

## Interactive Demo: Even & Odd Parts

Visualize the even and odd decomposition of a signal.

```{pyodide}
#| max-lines: 10

import numpy as np
import matplotlib.pyplot as plt

# Define a generic signal x(t)
def generic_x(t, decay_rate, offset_strength):
    # A combination of exponential decay and a sinusoidal component
    return np.exp(-decay_rate * t) * (np.sin(t) + offset_strength)

# Create vectorized versions
generic_x_vec = np.vectorize(generic_x)

# Function to plot even/odd decomposition of a continuous signal
def plot_continuous_decomposition(decay_rate, offset_strength):
    t_vals = np.linspace(-5, 5, 500)

    x_signal = generic_x_vec(t_vals, decay_rate, offset_strength)
    x_neg_signal = generic_x_vec(-t_vals, decay_rate, offset_strength)

    x_even = 0.5 * (x_signal + x_neg_signal)
    x_odd = 0.5 * (x_signal - x_neg_signal)

    fig, axes = plt.subplots(3, 1, figsize=(7, 4), sharex=True)

    # Original signal
    axes[0].plot(t_vals, x_signal, label='x(t)', color='blue')
    axes[0].set_title('Original Signal x(t)')
    axes[0].grid(True)
    axes[0].axvline(0, color='gray', linestyle=':', linewidth=0.8)
    axes[0].axhline(0, color='gray', linestyle=':', linewidth=0.8)
    axes[0].legend()

    # Even part
    axes[1].plot(t_vals, x_even, label='Ev{x(t)}', color='green')
    axes[1].set_title('Even Part')
    axes[1].grid(True)
    axes[1].axvline(0, color='gray', linestyle=':', linewidth=0.8)
    axes[1].axhline(0, color='gray', linestyle=':', linewidth=0.8)
    axes[1].legend()

    # Odd part
    axes[2].plot(t_vals, x_odd, label='Od{x(t)}', color='orange')
    axes[2].set_title('Odd Part')
    axes[2].grid(True)
    axes[2].axvline(0, color='gray', linestyle=':', linewidth=0.8)
    axes[2].axhline(0, color='gray', linestyle=':', linewidth=0.8)
    axes[2].legend()

    plt.tight_layout()
    plt.show()

# Set parameters directly here
decay_rate = 0.2
offset_strength = 0.5

# Run the plot
print("Continuous-Time Signal Even/Odd Decomposition Demo:")
plot_continuous_decomposition(decay_rate, offset_strength)

```

::: {.notes}
**Experiment with Signal Parameters:**
-   **Decay Rate:** Changes how quickly the exponential component decays.
-   **Offset Strength:** Introduces a constant offset, which heavily influences the even part.
-   Observe that the `Even Part` is symmetrical about the y-axis, and the `Odd Part` is symmetrical about the origin (and is zero at $t=0$).
-   Mentally (or by adding up the plots), verify that `Ev{x(t)} + Od{x(t)}` equals the `Original Signal x(t)`.
:::

---

## Summary

Fundamental transformations of the independent variable (time) for signals.

-   **Time Shift ($x(t \pm t_0)$ or $x[n \pm n_0]$):** Delays or advances a signal. Crucial for understanding propagation delays.
-   **Time Reversal ($x(-t)$ or $x[-n]$):** Reflects a signal about the origin. Important for symmetry concepts.
-   **Time Scaling ($x(\alpha t)$ or $x[\alpha n]$):** Compresses or stretches a signal. Linked to bandwidth in frequency domain.
-   **Combined Transformations ($x(\alpha t + \beta)$):** Requires a systematic order (shift then scale/reverse).

---

## Summary

-   **Periodic Signals ($x(t) = x(t+T)$ or $x[n] = x[n+N]$):** Signals that repeat themselves, characterized by a fundamental period.
-   **Even and Odd Signals:** Signals exhibiting specific symmetry under time reversal, and any signal can be uniquely decomposed into its even and odd parts.

::: {.notes}
Reinforce the "why" these transformations matter. They are not just mathematical curiosities. They represent real-world physical changes to signals as they are processed, transmitted, or interact with systems. They also form the basis for later analytical tools, such as the Convolution Integral/Sum and Fourier Transforms.
:::